<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on HANDMADE LOG</title><link>https://seungrye.github.io/posts/</link><description>Recent content in Posts on HANDMADE LOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 30 Oct 2021 15:25:05 +0000</lastBuildDate><atom:link href="https://seungrye.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Font family not found issue on matplot</title><link>https://seungrye.github.io/posts/2021-10-30-matplot-fontfamily-not-found-issue/</link><pubDate>Sat, 30 Oct 2021 15:25:05 +0000</pubDate><guid>https://seungrye.github.io/posts/2021-10-30-matplot-fontfamily-not-found-issue/</guid><description>파이썬으로 matplot 를 사용할때, 한글 폰트가 다음과 유사한 에러로 정상 출력되지 않는 현상이 발생하는 경우가 있습니다. $ python3 ~/hello.py findfont: Font family [&amp;#39;NanumGothic&amp;#39;] not found. Falling back to DejaVu Sans. /home/seungrye/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 49340 missing from current</description><content type="html"><![CDATA[<p>파이썬으로 matplot 를 사용할때, 한글 폰트가 다음과 유사한 에러로 정상 출력되지 않는 현상이 발생하는 경우가 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ python3 ~/hello.py 
findfont: Font family <span class="o">[</span><span class="s1">&#39;NanumGothic&#39;</span><span class="o">]</span> not found. Falling back to DejaVu Sans.
/home/seungrye/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph <span class="m">49340</span> missing from current font.
  font.set_text<span class="o">(</span>s, 0.0, <span class="nv">flags</span><span class="o">=</span>flags<span class="o">)</span>
...
</code></pre></div><p>사용한 코드는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="nn">plt</span>

<span class="c1"># Pie chart, where the slices will be ordered and plotted counter-clockwise:</span>
<span class="n">labels</span> <span class="o">=</span> <span class="s1">&#39;개구리&#39;</span><span class="p">,</span> <span class="s1">&#39;고양이&#39;</span><span class="p">,</span> <span class="s1">&#39;강아지&#39;</span><span class="p">,</span> <span class="s1">&#39;비둘기&#39;</span>
<span class="n">sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">45</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
<span class="n">explode</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># only &#34;explode&#34; the 2nd slice (i.e. &#39;Hogs&#39;)</span>

<span class="n">plt</span><span class="o">.</span><span class="n">rc</span><span class="p">(</span><span class="s1">&#39;font&#39;</span><span class="p">,</span> <span class="n">family</span><span class="o">=</span><span class="s1">&#39;NanumGothic&#39;</span><span class="p">)</span>

<span class="n">fig1</span><span class="p">,</span> <span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="n">ax1</span><span class="o">.</span><span class="n">pie</span><span class="p">(</span><span class="n">sizes</span><span class="p">,</span> <span class="n">explode</span><span class="o">=</span><span class="n">explode</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">,</span> <span class="n">autopct</span><span class="o">=</span><span class="s1">&#39;</span><span class="si">%1.1f%%</span><span class="s1">&#39;</span><span class="p">,</span>
        <span class="n">shadow</span><span class="o">=</span><span class="kc">True</span><span class="p">,</span> <span class="n">startangle</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
<span class="n">ax1</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s1">&#39;equal&#39;</span><span class="p">)</span>  <span class="c1"># Equal aspect ratio ensures that pie is drawn as a circle.</span>

<span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div><p>이는 matplot 의 font 설정이 적절한 폰트를 찾지 못해 발생하는 현상이며, 제 경우는 python 및 matplot 패키지가 설치된 이후 하나글 폰트를 설치해서, matplot 의 폰트 정보가 갱신되지 않은것이 이유로 보입니다.</p>
<p>폰트 정보가 담겨있는 파일은 다음의 경로에서 찾을 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ <span class="nb">pwd</span>
/home/seungrye/.cache/matplotlib
$ ls
fontlist-v330.json
</code></pre></div><p>해당 파일을 삭제 (안전을 위해 백업) 후, 코드를 다시 돌려보면 정상적으로 한글이 출력되는것을 확인 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">$ mv fontlist-v330.json fontlist-v330.json_
$ python3 ~/hello.py
$ ls
fontlist-v330.json fontlist-v330.json_
</code></pre></div><h3 id="tip">Tip</h3>
<p>참고로 폰트 목록은 다음과 같이 확인할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">font_manager</span>

<span class="n">manager</span><span class="o">.</span><span class="n">fontManager</span><span class="o">.</span><span class="n">ttflist</span><span class="p">:</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">font_manager</span><span class="o">.</span><span class="n">fontManager</span><span class="o">.</span><span class="n">ttflist</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="o">.</span><span class="n">name</span><span class="p">,</span> <span class="n">i</span><span class="o">.</span><span class="n">fname</span><span class="p">)</span>
</code></pre></div><h2 id="ref">Ref</h2>
<ul>
<li><a href="https://matplotlib.org/stable/gallery/pie_and_polar_charts/pie_features.html">Basic pie chart</a></li>
<li><a href="https://studioplug.tistory.com/333">https://studioplug.tistory.com/333</a></li>
</ul>
]]></content></item><item><title>C++ 에서 Lambda 와 Functional feature</title><link>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</guid><description>목적 람다를 &amp;lsquo;어떻게&amp;rsquo; 쓰는지 에 대해 설명합니다. 람다가 &amp;lsquo;뭔지&amp;rsquo;, &amp;lsquo;어디에&amp;rsquo</description><content type="html"><![CDATA[<h1 id="목적">목적</h1>
<ul>
<li>람다를 &lsquo;어떻게&rsquo; 쓰는지 에 대해 설명합니다.</li>
<li>람다가 &lsquo;뭔지&rsquo;, &lsquo;어디에&rsquo; 쓰는지에 대해 설명하지 않습니다.
<ul>
<li>스스로 찾아보도록 합시다.</li>
<li>나도 모름 ¯\<em>( ͡° ͜ʖ ͡°)</em>/¯</li>
</ul>
</li>
</ul>
<hr>
<h1 id="c-에서-lambda-syntax">C++ 에서 Lambda syntax</h1>
<pre tabindex="0"><code>[=] ( ) mutable -&gt;int { ... }
——— ——— ——————— ————— ———————
 1   2     3      4      5
</code></pre><ol>
<li>Capture</li>
<li>Parameter 목록 (Optional?)</li>
<li>Mutable specifier (Optional)</li>
<li>Return type (Optional)</li>
<li>람다 본문</li>
</ol>
<hr>
<h2 id="easy-example">E~~~asy Example</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="k">auto</span> <span class="n">add</span> <span class="o">=</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="kt">int</span> <span class="n">b</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span> <span class="p">};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;1+2:&#34;</span><span class="o">&lt;&lt;</span><span class="n">add</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>출력</p>
<pre tabindex="0"><code>1+2:3
</code></pre><hr>
<h1 id="capture">Capture</h1>
<ul>
<li><strong>[&amp;]</strong> : lambda 함수 외부 변수를 참조로 가져옴 (call-by-ref)</li>
<li><strong>[=]</strong> :  lambda 함수 외부 변수를 값으로 가져옴 (call-by-val)</li>
<li><strong>[x]</strong> : 변수 x 를 값으로 가져옴</li>
<li><strong>[=, &amp;x]</strong> : lambda 함수 외부 변수를 값으로 가져오되, 변수 x 는 참조로 가져옴</li>
<li><strong>[x, &amp;y, &amp;z]</strong> : 변수 x 는 값으로, y, z 는 참조로 가져옴</li>
</ul>
<hr>
<h1 id="capture-demo">Capture Demo</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="nf">x</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="n">y</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span><span class="n">z</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
<span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">z</span><span class="p">;</span>
<span class="p">[</span><span class="o">=</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">y</span><span class="p">,</span> <span class="n">p</span><span class="p">](){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d %d %d %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
    <span class="c1">// x=15, z=17;  // call-by-val can not modified
</span><span class="c1"></span>    <span class="n">y</span><span class="o">=</span><span class="mi">16</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="o">=</span><span class="mi">27</span><span class="p">;</span>    <span class="c1">// p point to z
</span><span class="c1"></span><span class="p">}();</span>
<span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d %d %d %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">);</span>
</code></pre></div><p>출력</p>
<pre tabindex="0"><code>5 6 7 7
5 16 27 27
</code></pre><hr>
<h1 id="capture-quiz">Capture Quiz</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="n">a</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kt">int</span><span class="o">*</span> <span class="n">p</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">;</span>
<span class="p">[</span><span class="o">=</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">](){</span>
    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34; inside lambda&gt; a:&#34;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="s">&#34;, p:&#34;</span><span class="o">&lt;&lt;*</span><span class="n">p</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}();</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;outside lambda&gt; a:&#34;</span><span class="o">&lt;&lt;</span><span class="n">a</span><span class="o">&lt;&lt;</span><span class="s">&#34;, p:&#34;</span><span class="o">&lt;&lt;*</span><span class="n">p</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div><p>출력</p>
<pre tabindex="0"><code> inside lambda&gt; a:?, p:?
outside lambda&gt; a:?, p:?
</code></pre><hr>
<h1 id="parameter-list">Parameter list</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">auto</span> <span class="n">pplus</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%d+%d=%d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">);</span>
<span class="p">};</span>

<span class="n">pplus</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
</code></pre></div><p>출력</p>
<pre tabindex="0"><code>2+3=5
</code></pre><hr>
<h1 id="mutable-specifier">Mutable specifier</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">[</span><span class="o">=</span><span class="p">](){</span><span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;c : &#34;</span><span class="o">&lt;&lt;</span><span class="n">c</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}();</span>
<span class="c1">//출력
</span><span class="c1">//&gt; error: cannot assign to a variable captured by copy in a non-mutable lambda
</span><span class="c1">//&gt; [=](){c=a+b; std::cout&lt;&lt;&#34;c : &#34;&lt;&lt;c&lt;&lt;std::endl;}();
</span><span class="c1">//&gt;       ~^
</span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">int</span> <span class="n">a</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">b</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
<span class="p">[</span><span class="o">=</span><span class="p">]()</span> <span class="k">mutable</span> <span class="p">{</span><span class="n">c</span><span class="o">=</span><span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="p">;</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;c : &#34;</span><span class="o">&lt;&lt;</span><span class="n">c</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;}();</span>
<span class="c1">//출력
</span><span class="c1">//&gt; 3
</span></code></pre></div><hr>
<h1 id="return-type">Return type</h1>
<ul>
<li>💦 Under construct</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++">
</code></pre></div><hr>
<h1 id="lambda-body">Lambda body</h1>
<ul>
<li>이걸 굳이 설명할 필요가&hellip; (￣ ‘i ￣;)</li>
</ul>
<p><img src="/posts/resources/_gen/images/3944540494575102317111-1315200466783997952.jpg" alt="height:400px"></p>
<hr>
<h1 id="다음장-부터는-뭘-좋아할지-몰라서-다-준비해본-것들임">다음장 부터는 뭘 좋아할지 몰라서 다 준비해본 것들임.</h1>
<h2 id="두서없음에-주의-">두서없음에 주의 💦</h2>
<p><img src="/posts/resources/_gen/images/bring_all.png" alt="bg right:40% 80%"></p>
<hr>
<h1 id="c-의-lambda-란">(C++ 의) Lambda 란?</h1>
<ul>
<li>함수 객체와 동일한 익명함수 이다.
<ul>
<li>함수 객체 (functor)
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++">  <span class="k">struct</span> <span class="nc">Add</span> <span class="p">{</span> <span class="kt">int</span> <span class="nf">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;}</span> <span class="p">};</span>
  <span class="n">Add</span> <span class="n">adder</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">adder</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div><ul>
<li>상태를 갖음</li>
<li>class 선언을 해야 함</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h1 id="functor-vs-lambda">Functor vs Lambda</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">class</span> <span class="nc">Add</span> <span class="p">{</span>
    <span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="k">operator</span><span class="p">()(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">Add</span><span class="p">()(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div><p><strong>VS</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="p">[](</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span> <span class="p">}(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</code></pre></div><hr>
<h1 id="this-capture">this capture</h1>
<ul>
<li>class member variable 에 접근하기 위해서는 <code>this</code> capture 를 사용</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// include string, memory, vector, algorithm
</span><span class="c1"></span>
<span class="k">struct</span> <span class="nc">Sorted</span> <span class="p">{</span>
    <span class="n">Sorted</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v</span><span class="p">)</span><span class="o">:</span><span class="n">v_</span><span class="p">(</span><span class="n">v</span><span class="p">){}</span>
    <span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">()</span><span class="o">&gt;</span> <span class="n">get</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">order</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">order</span><span class="o">==</span><span class="s">&#34;asc&#34;</span><span class="p">)</span> <span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">](){</span> <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">v_</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v_</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">less</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span> <span class="k">return</span> <span class="n">v_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">};</span>
        <span class="k">return</span> <span class="p">[</span><span class="k">this</span><span class="p">](){</span> <span class="n">std</span><span class="o">::</span><span class="n">sort</span><span class="p">(</span><span class="n">v_</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">v_</span><span class="p">.</span><span class="n">end</span><span class="p">(),</span> <span class="n">std</span><span class="o">::</span><span class="n">greater</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">());</span> <span class="k">return</span> <span class="n">v_</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="p">};</span>
    <span class="p">}</span>
    <span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">v_</span><span class="p">;</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Sorted</span> <span class="n">sort</span><span class="p">({</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">});</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;smallest : &#34;</span><span class="o">&lt;&lt;</span><span class="n">sort</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#34;asc&#34;</span><span class="p">)()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;biggest  : &#34;</span><span class="o">&lt;&lt;</span><span class="n">sort</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#34;dec&#34;</span><span class="p">)()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><hr>
<h2 id="this-capture-comparison">this capture comparison</h2>
<p><img src="/posts/resources/_gen/images/capture-this-in-lambda-expression-timeline-of-change.png" alt="height:500px"></p>
<hr>
<h1 id="lambda-재귀">Lambda 재귀</h1>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">f</span><span class="p">](</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="n">n</span><span class="o">&lt;=</span><span class="mi">1</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="n">n</span><span class="o">*</span><span class="n">f</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span> <span class="p">};</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;factorial(5) =&gt; &#34;</span><span class="o">&lt;&lt;</span><span class="n">f</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span> <span class="c1">// 5*4*3*2*1=&gt;120
</span></code></pre></div><ul>
<li>Lambda 를 재귀로 사용할 경우, 람다 객체 타입이 명시되어야 함
<ul>
<li><code>auto</code> 사용시, capture 시점에 타입이 추론 되지 않기 때문에,
타입을 명시해야 함.</li>
</ul>
</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="c1">// std::functional( return_type &lt;params, ..&gt; ) // Example
</span><span class="c1"></span><span class="n">std</span><span class="o">::</span><span class="n">functional</span><span class="p">(</span><span class="kt">int</span><span class="o">&lt;</span><span class="kt">char</span><span class="p">,</span><span class="kt">float</span><span class="p">,</span><span class="kt">void</span><span class="o">*&gt;</span><span class="p">)</span> <span class="n">fn</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">char</span> <span class="n">a</span><span class="p">,</span> <span class="kt">float</span> <span class="n">b</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span> <span class="n">c</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%c, %f, %p&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div><hr>
<h1 id="functional-programming-concept">Functional Programming Concept</h1>
<ul>
<li>순수 함수 (Pure function)</li>
<li>재귀 (Recustion, not loop)</li>
<li>참조 투명성 (Referential Transparency)</li>
<li><strong>1급 객체 함수</strong>, 고차 함수 (First-class, Higher-order function)</li>
<li>불변 변수 (Immutable)</li>
</ul>
<hr>
<h2 id="1급-객체-first-class-citizen-란">1급 객체 (first class citizen) 란?</h2>
<ol>
<li>All items can be the actual parameters of functions</li>
<li>All items can be returned as results of functions</li>
<li>All items can be the subject of assignment statements</li>
<li>All items can be tested for equality. (💦)</li>
</ol>
<p>Note. Primitive 변수는 어떤 언어에서나 1급 객체.</p>
<hr>
<h2 id="1급-객체-on-c">1급 객체 on C++</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">auto</span> <span class="n">plus2factory</span> <span class="o">=</span> <span class="p">[](</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span> <span class="n">f</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">std</span><span class="o">::</span><span class="n">function</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="o">&gt;</span><span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="p">};</span>
<span class="p">};</span>

<span class="k">auto</span> <span class="n">plus1</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
<span class="k">auto</span> <span class="n">plus2</span> <span class="o">=</span> <span class="n">plus2factory</span><span class="p">(</span><span class="n">plus1</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;5+1+2 =&gt; &#34;</span><span class="o">&lt;&lt;</span><span class="n">plus2</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="c1">// 출력
</span><span class="c1">// 5+1+2 =&gt; 8
</span></code></pre></div><hr>
<h3 id="c-14-이상">C++ 14 이상</h3>
<ul>
<li>앞서 예제에서 파라메터와 반환 타입을 <code>auto</code> 로 사용 가능</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">auto</span> <span class="n">plus2factory</span> <span class="o">=</span> <span class="p">[](</span><span class="k">auto</span> <span class="n">f</span><span class="p">)</span><span class="o">-&gt;</span><span class="k">auto</span><span class="p">{</span>
    <span class="k">return</span> <span class="p">[</span><span class="o">=</span><span class="p">](</span><span class="kt">int</span> <span class="n">y</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="nf">f</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span> <span class="p">};</span>
<span class="p">};</span>

<span class="k">auto</span> <span class="n">plus1</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span><span class="o">-&gt;</span><span class="kt">int</span><span class="p">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="p">};</span>
<span class="k">auto</span> <span class="n">plus2</span> <span class="o">=</span> <span class="n">plus2factory</span><span class="p">(</span><span class="n">plus1</span><span class="p">);</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;5+1+2 =&gt; &#34;</span><span class="o">&lt;&lt;</span><span class="n">plus2</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="c1">// 출력
</span><span class="c1">// 5+1+2 =&gt; 8
</span></code></pre></div><hr>
<h1 id="closure-using-lambda">Closure using Lambda</h1>
<ul>
<li>일급 객체 함수(first-class functions)의 개념을 이용하여
스코프(scope)에 묶인 변수를 바인딩 하기 위한 일종의 기술</li>
</ul>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">auto</span> <span class="n">startAt</span> <span class="o">=</span> <span class="p">[](</span><span class="kt">int</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">[</span><span class="n">x</span><span class="p">](</span><span class="kt">int</span> <span class="n">y</span><span class="p">){</span> <span class="k">return</span> <span class="n">x</span><span class="o">+</span><span class="n">y</span><span class="p">;</span> <span class="p">};</span> <span class="p">};</span>
<span class="k">auto</span> <span class="n">closure1</span> <span class="o">=</span> <span class="n">startAt</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
<span class="k">auto</span> <span class="n">closure2</span> <span class="o">=</span> <span class="n">startAt</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>

<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;result of closure start at 2 =&gt; &#34;</span><span class="o">&lt;&lt;</span><span class="n">closure2</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;result of closure start at 1 =&gt; &#34;</span><span class="o">&lt;&lt;</span><span class="n">closure1</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</code></pre></div><hr>
<h1 id="references">References</h1>
<ul>
<li><a href="https://docs.microsoft.com/ko-kr/cpp/cpp/lambda-expressions-in-cpp?view=msvc-160">MSDN C++의 람다 식</a></li>
<li><a href="https://docs.microsoft.com/ko-kr/cpp/cpp/examples-of-lambda-expressions?view=msvc-160">MSDN 람다식의 예</a></li>
<li><a href="https://en.wikipedia.org/wiki/First-class_citizen">First-class citizen</a></li>
<li><a href="https://velog.io/@kyusung/%ED%95%A8%EC%88%98%ED%98%95-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EC%9A%94%EC%95%BD">함수형 프로그래밍 요약</a></li>
<li><a href="https://hackr.io/blog/functional-programming">Functional Programming: Concepts, &hellip;</a></li>
<li><a href="http://sweeper.egloos.com/3015035">수까락의 프로그래밍 이야기</a></li>
<li><a href="https://docs.microsoft.com/en-us/previous-versions/visualstudio/visual-studio-2010/dd293608(v=vs.100)?redirectedfrom=MSDN">Lambda Expressions in C++</a></li>
<li><a href="https://www.nextptr.com/tutorial/ta1430524603/capture-this-in-lambda-expression-timeline-of-change">lambda expression timeline</a></li>
<li><a href="https://ko.wikipedia.org/wiki/%ED%81%B4%EB%A1%9C%EC%A0%80_(%EC%BB%B4%ED%93%A8%ED%84%B0_%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D)">클로저</a></li>
</ul>
]]></content></item><item><title>Git 의 Tracking branch 변경하기</title><link>https://seungrye.github.io/posts/2021-01-16-git-%EC%9D%98-tracking-branch-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</link><pubDate>Sat, 16 Jan 2021 19:08:20 +0900</pubDate><guid>https://seungrye.github.io/posts/2021-01-16-git-%EC%9D%98-tracking-branch-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</guid><description>&lt;p>git 이 tracking 하는 branch 가 잘못되어 있을때, 수정하는 방법을 알아 봅시다.&lt;/p></description><content type="html"><![CDATA[<p>git 이 tracking 하는 branch 가 잘못되어 있을때, 수정하는 방법을 알아 봅시다.</p>
<p>현재 <code>git pull</code> 했을때 발생하는 에러
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git pull
Your configuration specifies to merge with the ref <span class="s1">&#39;refs/heads/master&#39;</span>
from the remote, but no such ref was fetched.</code></pre></div></p>
<hr>
<p>현재 working directory repo 의 branch 이름
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git branch
* master</code></pre></div></p>
<hr>
<p>현재 master 브랜치가 tracking 해야하는 remote repo 의 branch 이름
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git branch -r
origin/main</code></pre></div></p>
<hr>
<p>tracking branch 변경
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git branch master --set-upstream-to origin/main</code></pre></div></p>
<p>Note. 기억에 의존해 적는거라 중간 과정 (출력 내용) 및 git pull 정상 동작시의 (출력) 내용이 빠져있습니다. :(</p>]]></content></item><item><title>C++ Error Handling Revisited - Raphael Meyer 보면서 정리</title><link>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</guid><description>&lt;p>C++ 에서 에러 처리를 어떻게 할수 있는지에 대해 알아보는 &lt;a href="https://youtu.be/Ybmomkc48wg">영상&lt;/a>을 보면서 정리(?) 한 내용입니다.&lt;/p>
&lt;p>영상에서는 haskell 예제를 보여주며 functional 컨셉을 설명하지만, (영어가 짧아 이해가 되지 않아) 단순히 변경되어가는 코드만 정리했습니다.
몇가지 코드(방법)이 더 있었는데 코드 자체가 이해가 안되서 정리하지 않았습니다.&lt;/p></description><content type="html"><![CDATA[<p>C++ 에서 에러 처리를 어떻게 할수 있는지에 대해 알아보는 <a href="https://youtu.be/Ybmomkc48wg">영상</a>을 보면서 정리(?) 한 내용입니다.</p>
<p>영상에서는 haskell 예제를 보여주며 functional 컨셉을 설명하지만, (영어가 짧아 이해가 되지 않아) 단순히 변경되어가는 코드만 정리했습니다.
몇가지 코드(방법)이 더 있었는데 코드 자체가 이해가 안되서 정리하지 않았습니다.</p>
<p>C/C++ 에서 일반적인 예외 처리는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">bool</span> <span class="n">MoistureSensor</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">Moisture</span> <span class="o">&amp;</span><span class="n">moisture</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="kt">bool</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="kt">bool</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">(</span><span class="n">Volume</span><span class="o">&amp;</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Moisture</span> <span class="n">moisture</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">moisture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">moisture</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">Temperature</span> <span class="n">temperature</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">temperature</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">,</span> <span class="n">temperatue</span><span class="p">,</span> <span class="n">amount</span><span class="p">))</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">amount</span><span class="p">))</span> <span class="p">{</span>
          <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>이를 좀더 보기 편하게 정리하면 다음과 같이 쓸 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="kt">bool</span> <span class="n">MoistureSensor</span><span class="o">::</span><span class="n">read</span><span class="p">(</span><span class="n">Moisture</span><span class="o">&amp;</span> <span class="n">moisture</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="kt">bool</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="kt">bool</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">(</span><span class="n">Volume</span><span class="o">&amp;</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">Moisture</span> <span class="n">moisture</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">moisture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">moisture</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="n">Temperature</span> <span class="n">temperature</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">(</span><span class="n">temperature</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">,</span> <span class="n">temperature</span><span class="p">,</span> <span class="n">amount</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">amount</span><span class="p">))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>C++17 에 포함된 std::optional 을 쓰면 다음과 같이 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">Moisture</span><span class="o">&gt;</span> <span class="n">MoistureSensor</span><span class="o">::</span><span class="n">read</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">monostate</span><span class="o">&gt;</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">optional</span><span class="o">&lt;</span><span class="n">Volume</span><span class="o">&gt;</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">moisture</span> <span class="o">=</span> <span class="n">moisture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">moisture</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">temperature</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">.</span><span class="n">value</span><span class="p">(),</span> <span class="n">temperature</span><span class="p">.</span><span class="n">value</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">nullopt</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">not</span> <span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">amount</span><span class="p">.</span><span class="n">value</span><span class="p">()))</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="k">nullptr</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="n">amount</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>std::variant 을 사용해서 에러 객체를 반환할수 있도록 개선할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">Moisture</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">MoistureSencor</span><span class="o">::</span><span class="n">read</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">monostate</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">Volume</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">moisture</span> <span class="o">=</span> <span class="n">mosture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="k">const</span> <span class="n">error</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get_if</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">mositure</span><span class="p">);</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="k">const</span> <span class="n">error</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get_if</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">temperature</span><span class="p">);</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">calculate_amount</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">Moisture</span><span class="o">&gt;</span><span class="p">(</span><span class="n">moisture</span><span class="p">),</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">Temperature</span><span class="o">&gt;</span><span class="p">(</span><span class="n">temperature</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="k">const</span> <span class="n">error</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get_if</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">)(</span><span class="o">&amp;</span><span class="n">amount</span><span class="p">);</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">pump_result</span> <span class="o">=</span> <span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">Volume</span><span class="o">&gt;</span><span class="p">(</span><span class="n">amount</span><span class="p">));</span>
  <span class="k">if</span> <span class="p">(</span><span class="k">auto</span> <span class="k">const</span> <span class="n">error</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">get_if</span><span class="o">&lt;</span><span class="n">Error</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pump_result</span><span class="p">);</span> <span class="n">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="o">*</span><span class="n">error</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">amount</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>물론 C++ 이 제공하는 예외처리를 사용할 수 있습니다.
하지만, try catch 가 마치 goto 와 같이 느껴져서 좋아하지 않는 사람도 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="n">Moisture</span> <span class="n">MoistureSensor</span><span class="o">::</span><span class="n">read</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="kt">void</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">Volume</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">try</span> <span class="p">{</span>
    <span class="k">auto</span> <span class="k">const</span> <span class="n">moisture</span> <span class="o">=</span> <span class="n">moisture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="k">auto</span> <span class="k">const</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
    <span class="k">auto</span> <span class="k">const</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">,</span> <span class="n">temperature</span><span class="p">);</span>
    <span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">amount</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">amount</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">catch</span><span class="p">(</span><span class="n">SensorError</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">WateringError</span><span class="p">{</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()};</span>
  <span class="p">}</span>
  <span class="k">catch</span><span class="p">(</span><span class="n">PumpError</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">e</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="n">WateringError</span><span class="p">{</span><span class="n">e</span><span class="p">.</span><span class="n">what</span><span class="p">()};</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>RUST (rust-lang) 에서의 방법은 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-rust" data-lang="rust"><span class="cm">/*
</span><span class="cm">enum Result&lt;T, E&gt; {
</span><span class="cm">  Ok(T),
</span><span class="cm">  Err(E),
</span><span class="cm">}
</span><span class="cm">*/</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">read_moisture</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Moisture</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="cm">/* ... */</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">pump</span><span class="p">(</span><span class="n">v</span>: <span class="kp">&amp;</span><span class="nc">Volume</span><span class="p">)</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="p">(),</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="cm">/* ... */</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="w"></span><span class="k">fn</span> <span class="nf">water_plant</span><span class="p">()</span><span class="w"> </span>-&gt; <span class="nb">Result</span><span class="o">&lt;</span><span class="n">Volume</span><span class="p">,</span><span class="w"> </span><span class="nb">String</span><span class="o">&gt;</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">moisture</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">read_moisture</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">m</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">m</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="p">};</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">temperature</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">read_temperature</span><span class="p">()</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">t</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">t</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="p">};</span><span class="w">
</span><span class="w">  </span><span class="kd">let</span><span class="w"> </span><span class="n">amount</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">,</span><span class="w"> </span><span class="n">temperature</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">v</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="n">v</span><span class="p">,</span><span class="w">
</span><span class="w">    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="k">return</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="p">};</span><span class="w">
</span><span class="w">  </span><span class="k">return</span><span class="w"> </span><span class="k">match</span><span class="w"> </span><span class="n">pump</span><span class="p">(</span><span class="o">&amp;</span><span class="n">amount</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="w">    </span><span class="nb">Ok</span><span class="p">(</span><span class="n">_</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Ok</span><span class="p">(</span><span class="n">amount</span><span class="p">),</span><span class="w">
</span><span class="w">    </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="w"> </span><span class="o">=&gt;</span><span class="w"> </span><span class="nb">Err</span><span class="p">(</span><span class="n">e</span><span class="p">),</span><span class="w">
</span><span class="w">  </span><span class="p">};</span><span class="w">
</span><span class="w">  </span><span class="cm">/* 다음과 같이 줄여 쓸 수 있음. */</span><span class="w">
</span><span class="w">  </span><span class="cm">/*
</span><span class="cm">  let moisture = read_moisture()?;
</span><span class="cm">  let temperature = read_temperature()?;
</span><span class="cm">  let amount = calculate_amount(moisture, temperature)?;
</span><span class="cm">  pump(&amp;amount)?;
</span><span class="cm">  return Ok(amount);
</span><span class="cm">   */</span><span class="w">
</span><span class="w"></span><span class="p">}</span><span class="w">
</span></code></pre></div><p>C++ 에서 RUST 와 유사한 방법을 사용해보면 다음과 같이 할 수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c++" data-lang="c++"><span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">OkType</span><span class="p">,</span> <span class="k">typename</span> <span class="n">ErrType</span><span class="o">&gt;</span>
<span class="k">class</span> <span class="nc">Result</span>
<span class="p">{</span>
  <span class="k">public</span><span class="o">:</span>
  <span class="n">Result</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>

  <span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">T</span><span class="p">,</span> <span class="k">typename</span> <span class="n">std</span><span class="o">::</span><span class="n">enable_if</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">is_convertible</span><span class="o">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">ErrType</span><span class="p">,</span> <span class="n">OkType</span><span class="o">&gt;&gt;</span><span class="p">{},</span> <span class="kt">int</span><span class="o">&gt;::</span><span class="n">type</span> <span class="o">=</span> <span class="mi">0</span><span class="o">&gt;</span>
  <span class="n">Result</span><span class="p">(</span><span class="n">T</span> <span class="o">&amp;&amp;</span><span class="n">value</span><span class="p">)</span><span class="o">:</span><span class="n">_value</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">forward</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">value</span><span class="p">)}</span> <span class="p">{}</span>

  <span class="n">ErrType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">err</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">err_index</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span> <span class="p">}</span>
  <span class="n">OkType</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ok</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">std</span><span class="o">::</span><span class="n">get</span><span class="o">&lt;</span><span class="n">ok_index</span><span class="o">&gt;</span><span class="p">(</span><span class="n">_value</span><span class="p">);</span> <span class="p">}</span>

  <span class="kt">bool</span> <span class="nf">is_err</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="n">result</span> <span class="n">_value</span><span class="p">.</span><span class="n">index</span><span class="p">()</span> <span class="o">==</span> <span class="n">err_index</span><span class="p">;</span> <span class="p">}</span>
  <span class="kt">bool</span> <span class="nf">is_ok</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="n">result</span> <span class="n">_value</span><span class="p">.</span><span class="n">index</span><span class="p">()</span> <span class="o">==</span> <span class="n">ok_index</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">private</span><span class="o">:</span>
  <span class="k">constexpr</span> <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">err_index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">constexpr</span> <span class="k">static</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="n">ok_index</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
  <span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">ErrType</span><span class="p">,</span> <span class="n">OkType</span><span class="o">&gt;</span> <span class="n">_value</span><span class="p">;</span>

  <span class="n">Result</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">ErrType</span><span class="p">,</span> <span class="n">OkType</span><span class="o">&gt;</span> <span class="n">value</span><span class="p">)</span><span class="o">:</span><span class="n">_value</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">value</span><span class="p">)}</span> <span class="p">{}</span>

  <span class="k">friend</span> <span class="k">auto</span> <span class="n">make_ok</span><span class="o">&lt;</span><span class="n">OkType</span><span class="p">,</span> <span class="n">ErrType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">OkType</span> <span class="n">value</span><span class="p">);</span>
  <span class="k">friend</span> <span class="k">auto</span> <span class="n">make_err</span><span class="o">&lt;</span><span class="n">OkType</span><span class="p">,</span> <span class="n">ErrType</span><span class="o">&gt;</span><span class="p">(</span><span class="n">ErrType</span> <span class="n">value</span><span class="p">);</span>
<span class="p">};</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">OkType</span><span class="p">,</span> <span class="k">typename</span> <span class="n">ErrType</span><span class="o">&gt;</span>
<span class="k">auto</span> <span class="n">make_ok</span><span class="p">(</span><span class="n">OkType</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">using</span> <span class="n">T</span> <span class="o">=</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">OkType</span><span class="p">,</span> <span class="n">ErrType</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">T</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">ErrType</span><span class="p">,</span> <span class="n">OkType</span><span class="o">&gt;</span><span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">in_place_index</span><span class="o">&lt;</span><span class="n">T</span><span class="o">::</span><span class="n">ok_index</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
  <span class="p">}};</span>
<span class="p">}</span>

<span class="k">template</span><span class="o">&lt;</span><span class="k">typename</span> <span class="n">OkType</span><span class="p">,</span> <span class="k">typename</span> <span class="n">ErrType</span><span class="o">&gt;</span>
<span class="k">auto</span> <span class="n">make_err</span><span class="p">(</span><span class="n">ErrType</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">using</span> <span class="n">T</span> <span class="o">=</span> <span class="n">Result</span><span class="o">&lt;</span><span class="n">OkType</span><span class="p">,</span> <span class="n">ErrType</span><span class="o">&gt;</span><span class="p">;</span>
  <span class="k">return</span> <span class="n">T</span><span class="p">{</span><span class="n">std</span><span class="o">::</span><span class="n">variant</span><span class="o">&lt;</span><span class="n">ErrType</span><span class="p">,</span> <span class="n">OkType</span><span class="o">&gt;</span><span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">in_place_index</span><span class="o">&lt;</span><span class="n">T</span><span class="o">::</span><span class="n">err_index</span><span class="o">&gt;</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">value</span><span class="p">)</span>
  <span class="p">}};</span>
<span class="p">}</span>

<span class="n">Result</span><span class="o">&lt;</span><span class="n">Moisture</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">MoistureSensor</span><span class="o">::</span><span class="n">read</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">Result</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">monostate</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">Pump</span><span class="o">::</span><span class="n">pump</span><span class="p">(</span><span class="n">Volume</span> <span class="n">amount</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* ... */</span> <span class="p">}</span>
<span class="n">Result</span><span class="o">&lt;</span><span class="n">Volume</span><span class="p">,</span> <span class="n">Error</span><span class="o">&gt;</span> <span class="n">WateringSystem</span><span class="o">::</span><span class="n">water</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">moisture</span> <span class="o">=</span> <span class="n">moisture_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">moisture</span><span class="p">.</span><span class="n">is_error</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">moisture</span><span class="p">.</span><span class="n">err</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">temperature</span> <span class="o">=</span> <span class="n">thermo_sensor</span><span class="p">.</span><span class="n">read</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">temperature</span><span class="p">.</span><span class="n">is_err</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">temperature</span><span class="p">.</span><span class="n">err</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">calculate_amount</span><span class="p">(</span><span class="n">moisture</span><span class="p">.</span><span class="n">ok</span><span class="p">(),</span> <span class="n">temperature</span><span class="p">.</span><span class="n">ok</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">amount</span><span class="p">.</span><span class="n">is_err</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">amount</span><span class="p">.</span><span class="n">err</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">pump_result</span> <span class="o">=</span> <span class="n">pump</span><span class="p">.</span><span class="n">pump</span><span class="p">(</span><span class="n">amount</span><span class="p">.</span><span class="n">ok</span><span class="p">());</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">pump_result</span><span class="p">.</span><span class="n">is_err</span><span class="p">())</span> <span class="p">{</span>
    <span class="k">return</span> <span class="n">pump_result</span><span class="p">.</span><span class="n">err</span><span class="p">();</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">amount</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">auto</span> <span class="k">const</span> <span class="n">amount</span> <span class="o">=</span> <span class="n">WateringSystem</span><span class="p">{}.</span><span class="n">water</span><span class="p">();</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">amount</span><span class="p">.</span><span class="n">is_ok</span><span class="p">())</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Water &#34;</span><span class="o">&lt;&lt;</span><span class="n">amount</span><span class="p">.</span><span class="n">ok</span><span class="p">().</span><span class="n">ml</span><span class="o">&lt;&lt;</span><span class="s">&#34; ml</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">amount</span><span class="p">.</span><span class="n">err</span><span class="p">().</span><span class="n">what</span><span class="o">&lt;&lt;</span><span class="s">&#34;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><p>Use <strong>value types</strong> to write code that is <em>expressive</em> and clearly <em>communicates</em> its <em>intent</em>.
라고 합니다.</p>]]></content></item><item><title>Show code of exception occurred when call exec on python</title><link>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</link><pubDate>Tue, 04 Aug 2020 15:29:30 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</guid><description>python 에서 exec 함수를 통해 임의의 코드를 수행시킬때, 예외가 발생했다면, 예외가 발생한 부분을 정확히 알고 싶을때 어떻게 할 수 있을까요@.@? 다음과 같이 traceback 을 서식화</description><content type="html"><![CDATA[<p>python 에서 <code>exec</code> 함수를 통해 임의의 코드를 수행시킬때, 예외가 발생했다면, 예외가 발생한 부분을 정확히 알고 싶을때 어떻게 할 수 있을까요@.@?</p>
<p>다음과 같이 traceback 을 서식화 하여 출력할때, <code>File &quot;&lt;string&gt;&quot;, line 4</code> 처럼 출력되어서 정확한 위치를 알기 귀찮습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">traceback</span>

<span class="n">codes</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">codes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;</span><span class="se">\
</span><span class="se"></span><span class="s2">print(&#34;hello&#34;, end=&#39;&#39;)
</span><span class="s2">print(&#34; &#34;, end=&#39;&#39;)
</span><span class="s2">print(&#34;world&#34;)
</span><span class="s2">&#34;&#34;&#34;</span><span class="p">)</span>

<span class="n">codes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;</span><span class="se">\
</span><span class="se"></span><span class="s2">def add(a, b):
</span><span class="s2">    return a + b
</span><span class="s2">
</span><span class="s2">print(&#39;2 + 3 =&gt; </span><span class="si">{}</span><span class="s2">&#39;.format(add(2, 3)))
</span><span class="s2">r = addd(4, 5)
</span><span class="s2">print(&#39;4 + 5 =&gt; </span><span class="si">{}</span><span class="s2">&#39;.format(r))
</span><span class="s2">&#34;&#34;&#34;</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">codes</span><span class="p">:</span>
        <span class="n">exec</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">_</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">traceback</span><span class="o">.</span><span class="n">format_exc</span><span class="p">())</span>
</code></pre></div><p>위 코드를 실행한 결과는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt">hello world
2 + 3 =&gt; 5
Traceback (most recent call last):
  File &#34;&lt;stdin&gt;&#34;, line 3, in &lt;module&gt;
  File &#34;&lt;string&gt;&#34;, line 5, in &lt;module&gt;
NameError: name &#39;addd&#39; is not defined
</code></pre></div><p>코드가 짧을 경우, 문제가 발생한 부분을 짚어내기 어렵지 않지만, 수십, 수백라인의 코드를 <code>exec</code> 호출을 통해서 실행중 예외가 발생한 경우 문제가 발생한 코드를 찾아내는것은 쉽지 않을 수 있습니다.</p>
<p>이를 쉽게 처리하기 위해서, <code>code</code> 에서 문제가 발생한 라인의 코드를 추출하면 됩니다.</p>
<p>말을 길게 했지만, 단순히 다음과 같이 처리하면 됩니다. :P</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">import</span> <span class="nn">traceback</span>

<span class="n">codes</span> <span class="o">=</span> <span class="p">[]</span>

<span class="n">codes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;</span><span class="se">\
</span><span class="se"></span><span class="s2">print(&#34;hello&#34;, end=&#39;&#39;)
</span><span class="s2">print(&#34; &#34;, end=&#39;&#39;)
</span><span class="s2">print(&#34;world&#34;)
</span><span class="s2">&#34;&#34;&#34;</span><span class="p">)</span>

<span class="n">codes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s2">&#34;&#34;&#34;</span><span class="se">\
</span><span class="se"></span><span class="s2">def add(a, b):
</span><span class="s2">    return a + b
</span><span class="s2">
</span><span class="s2">print(&#39;2 + 3 =&gt; </span><span class="si">{}</span><span class="s2">&#39;.format(add(2, 3)))
</span><span class="s2">r = addd(4, 5)
</span><span class="s2">print(&#39;4 + 5 =&gt; </span><span class="si">{}</span><span class="s2">&#39;.format(r))
</span><span class="s2">&#34;&#34;&#34;</span><span class="p">)</span>

<span class="n">execode</span> <span class="o">=</span> <span class="kc">None</span>

<span class="k">try</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">code</span> <span class="ow">in</span> <span class="n">codes</span><span class="p">:</span>
        <span class="n">execode</span> <span class="o">=</span> <span class="n">code</span>  <span class="c1"># save current running code</span>
        <span class="n">exec</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
<span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
    <span class="n">tbf</span> <span class="o">=</span> <span class="n">traceback</span><span class="o">.</span><span class="n">format_exc</span><span class="p">()</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">tbf</span><span class="p">)</span>

    <span class="k">if</span> <span class="s1">&#39;File </span><span class="se">\&#34;</span><span class="s1">&lt;string&gt;</span><span class="se">\&#34;</span><span class="s1">&#39;</span> <span class="ow">in</span> <span class="n">tbf</span><span class="p">:</span>  <span class="c1"># find `File &#34;&lt;string&gt;&#34;` </span>
        <span class="n">found</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="sa">r</span><span class="s1">&#39;File &#34;&lt;string&gt;&#34;, line (\d+)&#39;</span><span class="p">,</span> <span class="n">tbf</span><span class="p">)</span>  <span class="c1"># search exception occurred line</span>
        <span class="k">if</span> <span class="n">found</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">lineno</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">found</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
            <span class="nb">print</span><span class="p">(</span>
                <span class="s2">&#34;&lt;string&gt; =&gt; {{</span><span class="se">\n</span><span class="s2">&#34;</span> <span class="o">+</span> 
                <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">join</span><span class="p">([</span><span class="s1">&#39;</span><span class="si">{:03d}</span><span class="s1"> </span><span class="si">{}</span><span class="s1">&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">)</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">execode</span><span class="o">.</span><span class="n">splitlines</span><span class="p">())</span> <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="p">(</span><span class="n">lineno</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span> <span class="ow">and</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="p">(</span><span class="n">lineno</span><span class="o">+</span><span class="mi">1</span><span class="p">)])</span> <span class="o">+</span> 
                <span class="s2">&#34;</span><span class="se">\n</span><span class="s2">}}&#34;</span>
            <span class="p">)</span>
</code></pre></div><p>위와 같이 하면, 다음처럼 예외가 발생한 라인 근처의 코드를 포함하여 출력합니다. :)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-txt" data-lang="txt">hello world
2 + 3 =&gt; 5
Traceback (most recent call last):
  File &#34;&lt;stdin&gt;&#34;, line 4, in &lt;module&gt;
  File &#34;&lt;string&gt;&#34;, line 5, in &lt;module&gt;
NameError: name &#39;addd&#39; is not defined

&lt;string&gt; =&gt; {{
004 print(&#39;2 + 3 =&gt; {}&#39;.format(add(2, 3)))
005 r = addd(4, 5)
006 print(&#39;4 + 5 =&gt; {}&#39;.format(r))
}}
</code></pre></div><p>쓸만한진 모르겠지만, 나름 나쁘진 않지 않아영@.@?</p>
]]></content></item><item><title>홍길동전 서부극 Remake</title><link>https://seungrye.github.io/posts/2020-07-29-%ED%99%8D%EA%B8%B8%EB%8F%99%EC%A0%84-%EC%84%9C%EB%B6%80%EA%B7%B9-remake/</link><pubDate>Wed, 29 Jul 2020 18:56:38 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-29-%ED%99%8D%EA%B8%B8%EB%8F%99%EC%A0%84-%EC%84%9C%EB%B6%80%EA%B7%B9-remake/</guid><description>홍길동 이야기는 헐리우드 서부극으로 어레인지하면 꽤 재미있는 이야기가 나올거 같다. 독실한 기독교 신자이자 농장주인 아버지는 흑인 노예 사이에서 태어난 스튜어트</description><content type="html"><![CDATA[<p>홍길동 이야기는 헐리우드 서부극으로 어레인지하면 꽤 재미있는 이야기가 나올거 같다.</p>
<hr>
<p>독실한 기독교 신자이자 농장주인 아버지는 흑인 노예 사이에서 태어난 스튜어트를 아들로 인정하고 교육시키지만 주변의 눈치로 아버지라 부르지는 못하게 한다.</p>
<p>그것이 못마땅한 스튜어트지만 내색은 못하는데, 울고있는 스튜어트에게 다가온 아버지는 스튜어트를 안아주며 &lsquo;하느님이 다 알고계실거다. 나의 &lsquo;럭키 키즈&rsquo;&rsquo; 라고 말 해주고, 그 순간 스튜어트는 정신을 차린다.
감옥 창밖으로 들어오는 햇빛에 날이 밝았음을 눈치챈 스튜어트는 어떻게든 풀어나려 노력하지만 단단하 쇠사슬은 끊어지지 않는다.</p>
<p>그리고 갑자기 감옥 벽이 폭발하고, 무너진 벽으로 동료들이 뛰어들어온다. 허겁지겁 감옥으로 내려오던 기업가에게 매수된 보안관과 부하들을 쏴버린 동료들은 스튜어트를 풀어주고, 곧 행사가 시작되니 얼른 가자며 스튜어트에게 파란색 코트를 던져준다.</p>
<p>기차개통식 행사장. 대통령은 환호성을 들으며 연설을 하고있고, 기업가는 회중시계를 보며 물탑을 흘끗 바라본다. 그곳에서 윈체스터로 대통령을 겨누고있는 기업가의 부하.
그리고 총성이 울려퍼진다.
미소를 지으며 회중시계를 닫는 기업가는 대통령을 바라보지만 대통령은 여전히 연단에 서있고.</p>
<p>놀란 눈으로 물탑을 바라본 기업가의 눈에 파란코트를 입은 스튜어트의 모습이 드러난다.
&lsquo;스튜어트!&rsquo;
기업가의 외침과 동시에 부하들이 총을 뽑아들지만 이내 말을타고 돌격한 스튜어트 두명의 총에 제압당한다.
갑작스런 사태에 사람들이 마구 도망치고 여기저기서 총소리가 들린다.</p>
<p>사방에서 나타난 스튜어트들 때문에 놀란 기업가의 부하들은 제대로 총도 못 쏘고 하나 둘 쓰러지고, 그 혼란한 모습을 보며 부통령은 품에서 델린저를 꺼내 대통령을 겨눈다. 그 순간 사람들 사이에서 빠져나온 파란색 코트의 스튜어트가 권총으로 부통령을 쏴 버리고 대통령에게 다가간다.</p>
<p>그제야 기업가는 다른 스튜어트들은 동료들이 변장한거고 진짜 스튜어트가 대통령 옆에있을을 깨닫고 자신의 권총을 꺼내 스튜어트를 겨눈다. 스튜어트를 알아본 아버지가 스튜어트를 부르기위해 달려가던 와중 기업가의 총이 아들을 겨눈것을 발견하고, 총성이 울림과 동시에 몸을 던진다.</p>
<p>아버지가 총을 맞았음을 알고 스튜어트는 달려가고, 피를 흘리는 아버지에게 아버지라 큰 소리로 울부짓는 스튜어트의 뺨을 쓰다듬는 아버지. &lsquo;나의 럭키 키즈. 훌륭해 졌구나&hellip;&rsquo; 라는 말과함께 아버지는 숨을 거둔다. 분노에 찬 스튜어트는 말을타고 도주하는 기업가를 뒤쫒는다.</p>
<p>황야를 달리던중 기업가의 말이 쓰러지며 기업가는 바닥으로 떨어지고, 스튜어트는 그에게 천천히 다가간다.
&lsquo;널 법의 심판에 맞기겠다.&rsquo;
스튜어트의 말에 기업가는 껄껄 웃으며 &lsquo;노예주제에 어쩔거냐!&rsquo; 라며 스튜어트를 조롱하고, 몰래 허리춤에 숨겨둔 작은 권총으로 스튜어트를 쏜다.</p>
<p>황야에 울리는 총성한발. 그렇지만 쓰러진건 기업가였다. 스튜어트는 연기가 나는 권총을 다시 권총집에 넣고, 말을타고 마을로 향한다.</p>
<p>뒤늦게 도착한 기병대에 의해 기업가의 부하들은 모두 사로잡혔고, 대통령은 스튜어트와 악수하며 그 자리에서 노예제를 폐지할것을 선언한다.</p>
<p>모든것이 끝나고, 스튜어트와 동료들은 말에 올라탄다. 스튜어트의 어머니가 스튜어트에게 같이 살자 말하지만 스튜어트는 빙그레 웃으며 &lsquo;아직 서쪽에는 고통받는 사람들이 많이 있으니 그들을 돕기위해 떠나야합니다.&rsquo; 그리고 동료들과 석양을 향해 말을 달리는 스튜어트를 어머니가 바라본다.</p>
<p>얼마뒤 마을 술집. 술주정뱅이들이 서부의 전설 스튜어트와 세이빙 피플 클랜의 이야기를 나누고, 바텐더는 우체부가 가져다준 현상수배전단지를 벽에 붙인다. 그곳에는 &lsquo;스튜어트 &lsquo;더 럭키 키즈&rsquo;&rsquo; 라는 이름이 붙어있고, 그것을 누군가가 떼어낸다.
&lsquo;어이 중국인! 누군데 막 떼는거야!&rsquo;</p>
<p>라는 바텐더의 호통에 동양인 사내가 빙그레 웃으며 말한다.</p>
<p>&lsquo;나? 나 전우치요.&rsquo;</p>
<p>그 뒤에 올라오는 스텝롤.</p>
<hr>
<ul>
<li>출처 : <a href="https://twitter.com/napjaloo/status/1266208458476384256">납자루 twitter</a></li>
<li>원 줄거리 : <a href="https://ko.wikipedia.org/wiki/%ED%99%8D%EA%B8%B8%EB%8F%99%EC%A0%84">Wikipedia 홍길동전</a></li>
</ul>
]]></content></item><item><title>NestedDefaultOrderedDict on Python</title><link>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</link><pubDate>Tue, 28 Jul 2020 13:53:25 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</guid><description>python 3.7 부터는 dict 의 order 가 보장되지만, 낮은 버전의 python 에서는 order 이 보장되지 않을 수 있습니다. (3.5 에서는 order 가 보장되지 않음. OrderedDict 를 사용해야 함.) 그리고, 다음과 같이 nested</description><content type="html"><![CDATA[<p><a href="https://mail.python.org/pipermail/python-dev/2017-December/151283.html">python 3.7 부터는 dict 의 order 가 보장</a>되지만, 낮은 버전의 python 에서는 order 이 보장되지 않을 수 있습니다. (3.5 에서는 order 가 보장되지 않음. OrderedDict 를 사용해야 함.)</p>
<p>그리고, 다음과 같이 nested dict 를 초기화 하기위해서는 <code>nested = lambda: collections.defaultdict(nested)</code> 와 같은 선언 해야 했습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># a = []</span>
<span class="n">a</span> <span class="o">=</span> <span class="n">nested</span><span class="p">()</span>
<span class="n">a</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">][</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</code></pre></div><p>nested dict 같은 초기화도 되면서, OrderedDict 처럼 order 보장이 되는 dict 구현체는 없나? 같은 필요가 생기면서 찾다보니 <a href="https://stackoverflow.com/questions/6190331/how-to-implement-an-ordered-default-dict">stackoverflow 답변</a>중 구현체가 있어서 기록겸 내용을 남겨둡니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span><span class="p">,</span> <span class="n">Callable</span>

<span class="k">class</span> <span class="nc">DefaultOrderedDict</span><span class="p">(</span><span class="n">OrderedDict</span><span class="p">):</span>
    <span class="c1"># Source: http://stackoverflow.com/a/6190500/562769</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">default_factory</span><span class="o">=</span><span class="kc">None</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">default_factory</span> <span class="ow">is</span> <span class="ow">not</span> <span class="kc">None</span> <span class="ow">and</span>
           <span class="ow">not</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">default_factory</span><span class="p">,</span> <span class="n">Callable</span><span class="p">)):</span>
            <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s1">&#39;first argument must be callable&#39;</span><span class="p">)</span>
        <span class="n">OrderedDict</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="o">**</span><span class="n">kw</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span> <span class="o">=</span> <span class="n">default_factory</span>

    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">OrderedDict</span><span class="o">.</span><span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">)</span>
        <span class="k">except</span> <span class="ne">KeyError</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="fm">__missing__</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>

    <span class="k">def</span> <span class="fm">__missing__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
        <span class="bp">self</span><span class="p">[</span><span class="n">key</span><span class="p">]</span> <span class="o">=</span> <span class="n">value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">value</span>

    <span class="k">def</span> <span class="nf">__reduce__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span> <span class="ow">is</span> <span class="kc">None</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">()</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">args</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span><span class="p">,</span>
        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="n">args</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="kc">None</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">copy</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__copy__</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">__copy__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)(</span><span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span><span class="p">,</span> <span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__deepcopy__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">memo</span><span class="p">):</span>
        <span class="kn">import</span> <span class="nn">copy</span>
        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="bp">self</span><span class="p">)(</span><span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span><span class="p">,</span>
                          <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">()))</span>

    <span class="k">def</span> <span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="s1">&#39;OrderedDefaultDict(</span><span class="si">%s</span><span class="s1">, </span><span class="si">%s</span><span class="s1">)&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">default_factory</span><span class="p">,</span>
                                               <span class="n">OrderedDict</span><span class="o">.</span><span class="fm">__repr__</span><span class="p">(</span><span class="bp">self</span><span class="p">))</span>

<span class="k">def</span> <span class="nf">NestedDict</span><span class="p">():</span>
    <span class="k">return</span> <span class="n">DefaultOrderedDict</span><span class="p">(</span><span class="n">NestedDict</span><span class="p">)</span>
</code></pre></div><p>사용법은 생각했던 대로, 다음과 같이 쓰면 됩니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">a</span> <span class="o">=</span> <span class="n">NestedDict</span><span class="p">()</span>
<span class="n">a</span><span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">][</span><span class="s1">&#39;b&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;c&#39;</span>
</code></pre></div><p>참..쉽죠@.@?</p>
]]></content></item><item><title>Convert nested dict to ordered dict on Python</title><link>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</link><pubDate>Thu, 23 Jul 2020 16:56:10 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</guid><description>다음과 같이 충첩된 dict 가 있다고 할때, dict_ = { &amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: [2, 3, 4], &amp;#39;c&amp;#39;: { &amp;#39;d&amp;#39;: 5 }, &amp;#39;d&amp;#39;: &amp;#39;6789&amp;#39; } ordered dict 로 변환하기 위해서는 다음과 같이 재귀 함수를 만들어서 변환할 수 있다. from collections import OrderedDict def</description><content type="html"><![CDATA[<p>다음과 같이 충첩된 dict 가 있다고 할때,</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="n">dict_</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
    <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
    <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">{</span>
            <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="mi">5</span>
    <span class="p">},</span>
    <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="s1">&#39;6789&#39;</span>
<span class="p">}</span>
</code></pre></div><p>ordered dict 로 변환하기 위해서는 다음과 같이 재귀 함수를 만들어서 변환할 수 있다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">OrderedDict</span>
<span class="k">def</span> <span class="nf">to_ordereddict</span><span class="p">(</span><span class="n">item</span><span class="p">):</span>
    <span class="n">od</span> <span class="o">=</span> <span class="n">OrderedDict</span><span class="p">()</span>
    <span class="k">for</span> <span class="n">k</span><span class="p">,</span> <span class="n">v</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">items</span><span class="p">()):</span>
            <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="nb">dict</span><span class="p">):</span>
                    <span class="n">od</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">to_ordereddict</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                    <span class="n">od</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">v</span>
    <span class="k">return</span> <span class="n">od</span>
</code></pre></div><p>결과는 다음과 같다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="o">&gt;&gt;&gt;</span> <span class="n">dict_</span> <span class="o">=</span> <span class="p">{</span>
<span class="o">...</span>     <span class="s1">&#39;a&#39;</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
<span class="o">...</span>     <span class="s1">&#39;b&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">],</span>
<span class="o">...</span>     <span class="s1">&#39;c&#39;</span><span class="p">:</span> <span class="p">{</span>
<span class="o">...</span>             <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="mi">5</span>
<span class="o">...</span>     <span class="p">},</span>
<span class="o">...</span>     <span class="s1">&#39;d&#39;</span><span class="p">:</span> <span class="s1">&#39;6789&#39;</span>
<span class="o">...</span> <span class="p">}</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">odict_</span> <span class="o">=</span> <span class="n">to_ordereddict</span><span class="p">(</span><span class="n">dict_</span><span class="p">)</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">odict_</span>
<span class="n">OrderedDict</span><span class="p">([(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="p">(</span><span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">]),</span> <span class="p">(</span><span class="s1">&#39;c&#39;</span><span class="p">,</span> <span class="n">OrderedDict</span><span class="p">([(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">)])),</span> <span class="p">(</span><span class="s1">&#39;d&#39;</span><span class="p">,</span> <span class="s1">&#39;6789&#39;</span><span class="p">)])</span>
</code></pre></div><p>괜찮죠? (¬‿¬)</p>
]]></content></item><item><title>Initialize nested dict on Python</title><link>https://seungrye.github.io/posts/2020-07-21-initialize-nested-dict-on-python/</link><pubDate>Tue, 21 Jul 2020 10:37:57 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-21-initialize-nested-dict-on-python/</guid><description>#!/usr/bin/perl my %dict_ = (); $dict-&amp;gt;{&amp;#39;hello&amp;#39;}-&amp;gt;{&amp;#39;world&amp;#39;} = &amp;#39;PERL&amp;#39;; print &amp;#34;dict_ : $dict \n&amp;#34;; print &amp;#34;hello : $dict-&amp;gt;{&amp;#39;hello&amp;#39;} \n&amp;#34;; print &amp;#34;world : $dict-&amp;gt;{&amp;#39;hello&amp;#39;}-&amp;gt;{&amp;#39;world&amp;#39;} \n&amp;#34;; 출력 결과는 다음과 같습니다. dict_ : HASH(0x5587f28af740) hello : HASH(0x5587f28c7530) world : PERL 파이썬에서 동일하게 코드를 구성하면 어떻게 동작할까영@</description><content type="html"><![CDATA[<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-perl" data-lang="perl"><span class="ch">#!/usr/bin/perl</span>

<span class="k">my</span> <span class="nv">%dict_</span> <span class="o">=</span> <span class="p">();</span>

<span class="nv">$dict</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;hello&#39;</span><span class="p">}</span><span class="o">-&gt;</span><span class="p">{</span><span class="s">&#39;world&#39;</span><span class="p">}</span> <span class="o">=</span> <span class="s">&#39;PERL&#39;</span><span class="p">;</span>

<span class="k">print</span> <span class="s">&#34;dict_ : $dict \n&#34;</span><span class="p">;</span>
<span class="k">print</span> <span class="s">&#34;hello : $dict-&gt;{&#39;hello&#39;} \n&#34;</span><span class="p">;</span>
<span class="k">print</span> <span class="s">&#34;world : $dict-&gt;{&#39;hello&#39;}-&gt;{&#39;world&#39;} \n&#34;</span><span class="p">;</span>
</code></pre></div><p>출력 결과는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">dict_ : HASH(0x5587f28af740) 
hello : HASH(0x5587f28c7530) 
world : PERL 
</code></pre></div><p>파이썬에서 동일하게 코드를 구성하면 어떻게 동작할까영@.@?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>

<span class="n">dict_</span> <span class="o">=</span> <span class="p">{}</span>

<span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">][</span><span class="s1">&#39;world&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;PYTHON&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;dict_ : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hello : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;world : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">][</span><span class="s1">&#39;world&#39;</span><span class="p">])</span>
</code></pre></div><p>출력 결과는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">Traceback (most recent call last):
  File &#34;./Playground/file0.py&#34;, line 5, in &lt;module&gt;
      dict_[&#39;hello&#39;][&#39;world&#39;] = &#39;PYTHON&#39;
      KeyError: &#39;hello&#39;
</code></pre></div><p>Key 가 없을 경우, Access 에러가 발생합니다.</p>
<p>Perl 과 유사하게 동작하도록 할수는 없을까영@.@?</p>
<p>다음과 같이 하면 됩니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">nested</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">nested</span><span class="p">)</span> <span class="c1"># nested dictionary factory</span>

<span class="n">dict_</span> <span class="o">=</span> <span class="n">nested</span><span class="p">()</span>

<span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">][</span><span class="s1">&#39;world&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;PYTHON&#39;</span>

<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;dict_ : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">)</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;hello : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">])</span>
<span class="nb">print</span><span class="p">(</span><span class="s2">&#34;world : &#34;</span><span class="p">,</span> <span class="n">dict_</span><span class="p">[</span><span class="s1">&#39;hello&#39;</span><span class="p">][</span><span class="s1">&#39;world&#39;</span><span class="p">])</span>
</code></pre></div><p>출력 결과는 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">dict_ :  defaultdict(&lt;function &lt;lambda&gt; at 0x7f311f8851f0&gt;, {&#39;hello&#39;: defaultdict(&lt;function &lt;lambda&gt; at 0x7f311f8851f0&gt;, {&#39;world&#39;: &#39;PYTHON&#39;})})
hello :  defaultdict(&lt;function &lt;lambda&gt; at 0x7f311f8851f0&gt;, {&#39;world&#39;: &#39;PYTHON&#39;})
world :  PYTHON
</code></pre></div><p>Key check 나 length check 는 일반적인 dictionary 사용과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>

<span class="kn">from</span> <span class="nn">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>

<span class="n">nested</span> <span class="o">=</span> <span class="k">lambda</span><span class="p">:</span> <span class="n">defaultdict</span><span class="p">(</span><span class="n">nested</span><span class="p">)</span> <span class="c1"># nested dictionary factory</span>

<span class="n">dict_1</span> <span class="o">=</span> <span class="n">nested</span><span class="p">()</span>  <span class="c1"># empty dict</span>
<span class="n">dict_2</span> <span class="o">=</span> <span class="p">{}</span>  <span class="c1"># empty dict</span>

<span class="k">if</span> <span class="s1">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">dict_1</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;nested dict has a key&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;nested dict has no key&#39;</span><span class="p">)</span>

<span class="k">if</span> <span class="s1">&#39;key&#39;</span> <span class="ow">in</span> <span class="n">dict_2</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;dict has a key&#39;</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">&#39;dict has no key&#39;</span><span class="p">)</span>

<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;length of nested dict =&gt; &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_1</span><span class="p">))</span>
<span class="nb">print</span><span class="p">(</span><span class="s1">&#39;length of dict =&gt; &#39;</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">dict_2</span><span class="p">))</span>
</code></pre></div><p>출력 내용은 다음과 같습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text">nested dict has no key
dict has no key
length of nested dict =&gt;  0
length of dict =&gt;  0
</code></pre></div><p>위 내용은 <a href="https://stackoverflow.com/a/23036575">StackOverflow</a> 내용을 참고하여 작성했습니다.</p>
<p>사실, 나중에 내가 보려고 작성함. (. ❛ ᴗ ❛.)</p>
]]></content></item><item><title>Windows docker mount point setting</title><link>https://seungrye.github.io/posts/2020-07-14-windows-docker-mount-point/</link><pubDate>Tue, 14 Jul 2020 15:11:00 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-14-windows-docker-mount-point/</guid><description>Windows 10 에서 Docker Desktop 을 사용할때, mount point 를 어떻게 지정해야 하는지 모르겠을때 참고하기 위해 작성합니다. ![WSL2Integrated](/posts/resources/_gen/images/2020-07-15 000903.png) WSL2 integrated 되어 있을때의 설정입니다. ![MountPoint](/posts/resources/_gen/images/2020-07-15 000851.png) /run/desktop/mnt/host/{drive}/{host path} 와 같이 지정하면 됩</description><content type="html"><![CDATA[<p>Windows 10 에서 Docker Desktop 을 사용할때, mount point 를 어떻게 지정해야 하는지 모르겠을때 참고하기 위해 작성합니다.</p>
<p>![WSL2Integrated](/posts/resources/_gen/images/2020-07-15 000903.png)
WSL2 integrated 되어 있을때의 설정입니다.</p>
<p>![MountPoint](/posts/resources/_gen/images/2020-07-15 000851.png)
<code>/run/desktop/mnt/host/{drive}/{host path}</code> 와 같이 지정하면 됩니다.</p>
<p>Note. Windows container 이거나, WSL2 가 not integrated 일때는 mount point 가 달라져야 할 수 있습니다.</p>
<p>캡쳐된 이미지만 봐도 충분히 알수 있을것 입니다. ( ͡~ ͜ʖ ͡°)</p>
]]></content></item><item><title>How to list linked shared libraries under MacOS</title><link>https://seungrye.github.io/posts/2020-07-13-howto-list-shared-libs-under-macos-commandline/</link><pubDate>Mon, 13 Jul 2020 19:24:15 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-13-howto-list-shared-libs-under-macos-commandline/</guid><description>MacOS 상에서, 실행파일이 사용하는 라이브러리 목록을 알고 싶을때 다음과 같이 otool 명령을 사용하여 확인할수 있습니다. HackCat:~ Songsangjun$ otool -L /bin/ls /bin/ls: /usr/lib/libutil.dylib (compatibility version 1.0.0, current version 1.0.0) /usr/lib/libncurses.5.4.dylib (compatibility version 5.4.0, current version 5.4.0) /usr/lib/libSystem.B.dylib</description><content type="html"><![CDATA[<p>MacOS 상에서, 실행파일이 사용하는 라이브러리 목록을 알고 싶을때 다음과 같이 <code>otool</code> 명령을 사용하여 확인할수 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-sh" data-lang="sh">HackCat:~ Songsangjun$ otool -L /bin/ls

/bin/ls:
/usr/lib/libutil.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1.0.0<span class="o">)</span>
/usr/lib/libncurses.5.4.dylib <span class="o">(</span>compatibility version 5.4.0, current version 5.4.0<span class="o">)</span>
/usr/lib/libSystem.B.dylib <span class="o">(</span>compatibility version 1.0.0, current version 1225.1.1<span class="o">)</span>
</code></pre></div><p>위 예제는 <a href="https://s0ngsari.tistory.com/entry/otool-object-tool">s0ngsari</a> 에서 발췌했습니다.
개인적으로 MacOS 를 사용하고 있지 않아서, 직접 명령을 쳐서 출력 내용을 긁어올 수 없었습니다. o(TヘTo)</p>
]]></content></item><item><title>Iterate over multiple list in a `for` loop</title><link>https://seungrye.github.io/posts/2020-07-08-python-iterate-over-multiple-list-in-a-for-loop/</link><pubDate>Wed, 08 Jul 2020 11:45:14 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-08-python-iterate-over-multiple-list-in-a-for-loop/</guid><description>python (python 3) 에서 다수의 list 가 있을때, 이 list 들을 한번의 loop 로 모두 순회하려면 다음과 같이 itertools 를 사용하면 됩니다. #!/usr/bin/python3 import itertools list_a = [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;] list_b = [&amp;#39;7&amp;#39;, &amp;#39;8&amp;#39;, &amp;#39;9&amp;#39;] list_c = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;] for v in itertools.chain(list_a, list_b, list_c): print(v,</description><content type="html"><![CDATA[<p><code>python</code> (python 3) 에서 다수의 list 가 있을때, 이 list 들을 한번의 loop 로 모두 순회하려면 다음과 같이 <code>itertools</code> 를 사용하면 됩니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="ch">#!/usr/bin/python3</span>

<span class="kn">import</span> <span class="nn">itertools</span>

<span class="n">list_a</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;2&#39;</span><span class="p">,</span> <span class="s1">&#39;3&#39;</span><span class="p">]</span>
<span class="n">list_b</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;7&#39;</span><span class="p">,</span> <span class="s1">&#39;8&#39;</span><span class="p">,</span> <span class="s1">&#39;9&#39;</span><span class="p">]</span>
<span class="n">list_c</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="s1">&#39;b&#39;</span><span class="p">,</span> <span class="s1">&#39;c&#39;</span><span class="p">]</span>

<span class="k">for</span> <span class="n">v</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">(</span><span class="n">list_a</span><span class="p">,</span> <span class="n">list_b</span><span class="p">,</span> <span class="n">list_c</span><span class="p">):</span>
    <span class="nb">print</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">)</span>  <span class="c1"># 라인끝 처리를 공백(&#39; &#39;) 으로 대체</span>
</code></pre></div><p>출력은 다음과 같습니다.</p>
<pre tabindex="0"><code>1 2 3 7 8 9 a b c
</code></pre><p>참 쉽쪙? (*￣3￣)╭</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-py" data-lang="py"><span class="c1"># note. print 함수에 end 파라메터는 다음과 같이 정의되어 있음</span>
<span class="nb">print</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">...</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s1">&#39; &#39;</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">,</span> <span class="n">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">,</span> <span class="n">flush</span><span class="o">=</span><span class="kc">False</span><span class="p">)</span>
</code></pre></div>]]></content></item><item><title>How to replace string with regex on vscode</title><link>https://seungrye.github.io/posts/2020-07-06-howto-replace-string-with-regex-on-vscode/</link><pubDate>Mon, 06 Jul 2020 18:45:00 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-06-howto-replace-string-with-regex-on-vscode/</guid><description>vscode 에서 다음과 같은 문자열을 치환 할때, regex 를 사용해서 치환하는 방법을 알아 봅시다. $self-&amp;gt;{item_name}; =&amp;gt; self.item_name ![ReplaceViaRegex](/posts/resources/_gen/images/2020-07-06 185226.png) () : 그룹. 추후 $1, $2 등의 변수처럼 사용 가능. \w+ : 1글자 이상. $</description><content type="html"><![CDATA[<p>vscode 에서 다음과 같은 문자열을 치환 할때, regex 를 사용해서 치환하는 방법을 알아 봅시다.</p>
<p><code>$self-&gt;{item_name};</code> =&gt; <code>self.item_name</code></p>
<!-- raw HTML omitted -->
<p>![ReplaceViaRegex](/posts/resources/_gen/images/2020-07-06 185226.png)</p>
<ul>
<li>() : 그룹. 추후 $1, $2 등의 변수처럼 사용 가능.</li>
<li>\w+ : 1글자 이상.</li>
<li>$ 및, {, } 등은 특수문자 취급되므로, escape (\) 처리함.</li>
</ul>
<p>참&hellip;쉽죠? o(<em>￣▽￣</em>)ブ</p>
]]></content></item><item><title>How to alias neovim to vi on powershell</title><link>https://seungrye.github.io/posts/2020-04-10-howto-alias-on-powershell/</link><pubDate>Fri, 10 Apr 2020 16:37:11 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-04-10-howto-alias-on-powershell/</guid><description>On Powershell environment, you can use alis as following command pattern. PS&amp;gt; Set-Alias vi C:\tools\neovim\Neovim\bin\nvim.exe If so, how can I automatically applied alias when open new powershell window? Is there any run commands file something like bash.rc? Yes It is. PS&amp;gt; $profile C:\Users\seung\OneDrive\문서\W</description><content type="html"><![CDATA[<p>On Powershell environment, you can use alis as following command pattern.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">PS<span class="p">&gt;</span> Set-Alias vi C:\tools\neovim\Neovim\bin\nvim.exe
</code></pre></div><p>If so, how can I automatically applied alias when open new powershell window?</p>
<!-- raw HTML omitted -->
<p>Is there any run commands file something like bash.rc?
Yes It is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">PS<span class="p">&gt;</span> $profile
C<span class="p">:</span><span class="nl">\Users\seung\OneDrive\문서\WindowsPowerShell\Microsoft.PowerShell_profile.ps1</span>
PS<span class="p">&gt;</span> mkdir C:\Users\seung\OneDrive\문서\WindowsPowerShell
PS<span class="p">&gt;</span> nvim C:\Users\seung\OneDrive\문서\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
</code></pre></div><p>Then set alias command to something.
In my case?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">PS<span class="p">&gt;</span> Get-Content C:\Users\seung\OneDrive\문서\WindowsPowerShell\Microsoft.PowerShell_profile.ps1
set-alias vi nvim
</code></pre></div><p>It&rsquo;s EASY. isn&rsquo;t it? NO!! it is not easy that much.
You would get following (similar) error if you open new powershell.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

새로운 크로스 플랫폼 PowerShell 사용 https://aka.ms/pscore6

. <span class="p">:</span> <span class="nl">이</span><span class="c1"> 시스템에서 스크립트를 실행할 수 없으므로 C:\Users\seung\OneDrive\문서\WindowsPowerShell\Microsoft.PowerShell_pro</span>
file.ps1 파일을 로드할 수 없습니다. 자세한 내용은 about_Execution_Policies(https://go.microsoft.com/fwlink/?LinkID=1351
70)를 참조하십시오.
위치 줄:1 문자:3
+ . &#39;C:\Users\seung\OneDrive\문서\WindowsPowerShell\Microsoft.PowerShell_ ...
+ +   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     + CategoryInfo          : 보안 오류: (:) [], PSSecurityException
+         + FullyQualifiedErrorId : UnauthorizedAccess
PS&gt;
</code></pre></div><p>You should set Security Policy.
I use following policy</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">PS<span class="p">&gt;</span> Set-ExecutionPolicy RemoteSigned

실행 규칙 변경
실행 정책은 신뢰하지 않는 스크립트로부터 사용자를 보호합니다. 실행 정책을 변경하면 about_Execution_Policies 도움말
항목(https://go.microsoft.com/fwlink/?LinkID=135170)에 설명된 보안 위험에 노출될 수 있습니다. 실행 정책을
변경하시겠습니까?
[Y] 예(Y)  [A] 모두 예(A)  [N] 아니요(N)  [L] 모두 아니요(L)  [S] 일시 중단(S)  [?] 도움말 (기본값은 <span class="s2">&#34;N&#34;</span>): Y
</code></pre></div><p>But you can use following altenatively.</p>
<ul>
<li>Restricted – No scripts can be run.</li>
<li>AllSigned – Only scripts signed by a trusted publisher can be run.</li>
<li>RemoteSigned – Downloaded scripts must be signed by a trusted publisher.</li>
<li>Unrestricted – All Windows PowerShell scripts can be run.</li>
</ul>
<p>Detailed explaination is on <a href="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7#parameters">Set-ExecutionPolicy</a></p>
<p>End. seriously :)</p>
]]></content></item><item><title>How to merge branch to trunk</title><link>https://seungrye.github.io/posts/2020-03-28-howto-merge-svn-branch-to-trunk/</link><pubDate>Sat, 28 Mar 2020 12:34:57 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-03-28-howto-merge-svn-branch-to-trunk/</guid><description>To merge branch to trunk, remember following command.
&amp;gt; svn switch http://trunk_url &amp;gt; svn merge http:://branch_url &amp;gt; svn commit -m &amp;#34;blah blah...&amp;#34; Change current workspace to trunk. Merge branch&amp;rsquo;s changelog to current workspace (trunk). Commit it with some commit message.</description><content type="html"><![CDATA[<p>To merge branch to trunk, remember following command.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd"><span class="p">&gt;</span> svn switch http://trunk_url
<span class="p">&gt;</span> svn merge http:://branch_url
<span class="p">&gt;</span> svn commit -m <span class="s2">&#34;blah blah...&#34;</span>
</code></pre></div><!-- raw HTML omitted -->
<ol>
<li>Change current workspace to trunk.</li>
<li>Merge branch&rsquo;s changelog to current workspace (trunk).</li>
<li>Commit it with some commit message.</li>
</ol>
]]></content></item><item><title>How to checkout branch from remote</title><link>https://seungrye.github.io/posts/2020-03-28-howto-checkout-git-branch-from-remote/</link><pubDate>Sat, 28 Mar 2020 12:30:34 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-03-28-howto-checkout-git-branch-from-remote/</guid><description>To checkout branch from remote repo, just remember following command
&amp;gt; git checkout -r origin/remote_branch_name</description><content type="html"><![CDATA[<p>To checkout branch from remote repo, just remember following command</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">&gt; git checkout -r origin/remote_branch_name
</code></pre></div>]]></content></item><item><title>How to setup neovim for rust on windows</title><link>https://seungrye.github.io/posts/2020-01-13-how-to-setup-neovim-for-rust-on-windows/</link><pubDate>Mon, 13 Jan 2020 23:46:32 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-01-13-how-to-setup-neovim-for-rust-on-windows/</guid><description>&lt;p>We need rust, neovim, python. that&amp;rsquo;s it.&lt;/p></description><content type="html"><![CDATA[<p>We need rust, neovim, python. that&rsquo;s it.</p>
<p>First of all.</p>
<h1 id="install-neovim">Install neovim.</h1>
<p>I use chocolately.</p>
<p>Note. Installing Chocolately guide : <a href="https://chocolatey.org/install">https://chocolatey.org/install</a></p>
<p>I can find neovim package in choco</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">C<span class="p">:</span><span class="nl">\Windows\system32</span><span class="c1">&gt;choco search neovim</span>
Chocolatey v0.10.15
neovim 0.4.3 [Approved]
1 packages found.
C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;choco install neovim -y</span>
</code></pre></div><p>But to support rust on nvim properly. We need nvim 0.5.0+.
I just install 0.4.3 version via choco then overwrite archived neovim 0.5.0 package (nvim-win64.zip) located in <a href="https://github.com/neovim/neovim/releases">https://github.com/neovim/neovim/releases</a></p>
<p>Note. neovim via choco will installed in C:\tools\neovim</p>
<p>Then I can get following version information.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">C<span class="p">:</span><span class="nl">\Windows\system32</span><span class="c1">&gt;nvim --version</span>
NVIM v0.5.0-309-g05ea3c199
Build type: RelWithDebInfo
LuaJIT 2.1.0-beta3
Compilation: C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Tools/MSVC/14.16.27023/bin/Hostx86/x64/cl.exe /DWIN32 /D_WINDOWS /W3 /MD /Zi /O2 /Ob1 /DNDEBUG /W3 -D_CRT_SECURE_NO_WARNINGS -D_CRT_NONSTDC_NO_DEPRECATE -DWIN32 -D_WIN32_WINNT=0x0600 -DINCLUDE_GENERATED_DECLARATIONS -DUTF8PROC_STATIC -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -DMIN_LOG_LEVEL=3 -IC:/projects/neovim/build/config -IC:/projects/neovim/src -IC:/projects/nvim-deps/usr/include -IC:/projects/neovim/build/src/nvim/auto -IC:/projects/neovim/build/include
Compiled by appveyor@APPVYR-WIN

Features: -acl +iconv +tui
See <span class="s2">&#34;:help feature-compile&#34;</span>

   system vimrc file: <span class="s2">&#34;$VIM\sysinit.vim&#34;</span>
  fall-back for $VIM: <span class="s2">&#34;C:/Program Files/nvim/share/nvim&#34;</span>

Run :checkhealth for more info
</code></pre></div><h1 id="install-python">Install python</h1>
<p>Do not install python via window store.
neovim can not find proper python path.</p>
<p>I use choco to install python3</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;choco search python3</span>
Chocolatey v0.10.15
python3 3.8.1.20200110 [Approved]
...
5 packages found.

C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;choco install python3 -y</span>
</code></pre></div><h1 id="install-rust">Install rust</h1>
<p>Install the rust (<a href="https://www.rust-lang.org/tools/install">https://www.rust-lang.org/tools/install</a>) and some packages</p>
<pre tabindex="0"><code>rustup update
rustup component add rustfmt
rustup component add clippy
</code></pre><h1 id="build-and-install-rust-analyzer">Build and install <code>rust-analyzer</code></h1>
<p>Note. it require rust version 1.4.0+
Note. it requires terminal with Administrator permission.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">C<span class="p">:</span><span class="nl">\Windows\system32</span><span class="c1">&gt;cd %HOMEPATH%</span>
C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;git clone https://github.com/rust-analyzer/rust-analyzer</span>
Cloning into &#39;rust-analyzer&#39;...
remote: Enumerating objects: 22, done.
remote: Counting objects: 100% (22/22), done.
remote: Compressing objects: 100% (19/19), done.
remote: Total 62042 (delta 4), reused 18 (delta 2), pack-reused 62020
Receiving objects: 100% (62042/62042), 16.27 MiB <span class="p">|</span> 4.72 MiB/s, done.
Resolving deltas: 100% (40224/40224), done.
C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;cd rust-analyzer</span>
C<span class="p">:</span><span class="nl">\Users\seung\rust-analyzer</span><span class="c1">&gt;cargo xtask install --server</span>
...
C<span class="p">:</span><span class="nl">\Users\seung\rust-analyzer</span><span class="c1">&gt;cd ..</span>
C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;rmdir /S /Q rust-analyzer</span>
C<span class="p">:</span><span class="nl">\Users\seung</span><span class="c1">&gt;ra_lsp_server --version</span>
rust-analyzer 875352b
</code></pre></div><h1 id="install-nvim-plugin-vim-plug">Install nvim plugin <code>vim-plug</code></h1>
<p>Open PowerShell terminal and type following</p>
<p>Note. see <a href="https://jdhao.github.io/2018/11/15/neovim_configuration_windows/#install-plugin-manager-vim-plug">https://jdhao.github.io/2018/11/15/neovim_configuration_windows/#install-plugin-manager-vim-plug</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cmd" data-lang="cmd">PS C:\Users\seung<span class="p">&gt;</span> md ~\AppData\Local\nvim\autoload


    디렉터리: C:\Users\seung\AppData\Local\nvim


Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----     2020-01-13  오후 11:12                autoload


PS C:\Users\seung<span class="p">&gt;</span> $uri = &#39;https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#39;
PS C:\Users\seung<span class="p">&gt;</span> (New-Object Net.WebClient).DownloadFile(
<span class="p">&gt;&gt;</span>   $uri,
<span class="p">&gt;&gt;</span>   $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath(
<span class="p">&gt;&gt;</span>     <span class="s2">&#34;~\AppData\Local\nvim\autoload\plug.vim&#34;</span>
<span class="p">&gt;&gt;</span>   )
<span class="p">&gt;&gt;</span> )
PS C:\Users\seung<span class="p">&gt;</span>pip install pynvim
</code></pre></div><h1 id="setup-neovim-for-rust-development">Setup neovim for rust development</h1>
<p>edit init.vim file on &ldquo;~\AppData\Local\nvim\init.vim&rdquo;</p>
<p>Note. following setting is in <a href="https://dev.to/drmason13/configure-neovim-for-rust-development-1fjn">Configure neovim for rust development</a></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-vim" data-lang="vim"><span class="nx">call</span> <span class="nx">plug</span>#<span class="nx">begin</span><span class="p">()</span><span class="err">
</span><span class="err"></span><span class="nx">Plug</span> <span class="s1">&#39;neovim/nvim-lsp&#39;</span><span class="err">
</span><span class="err"></span><span class="nx">Plug</span> <span class="s1">&#39;Shougo/deoplete.nvim&#39;</span><span class="p">,</span> { <span class="s1">&#39;do&#39;</span>: <span class="s1">&#39;:UpdateRemotePlugins&#39;</span> }<span class="err">
</span><span class="err"></span><span class="nx">Plug</span> <span class="s1">&#39;Shougo/deoplete-lsp&#39;</span><span class="err">
</span><span class="err"></span><span class="nx">Plug</span> <span class="s1">&#39;ervandew/supertab&#39;</span><span class="err">
</span><span class="err"></span><span class="nx">Plug</span> <span class="s1">&#39;Chiel92/vim-autoformat&#39;</span><span class="err">
</span><span class="err"></span><span class="nx">call</span> <span class="nx">plug</span>#<span class="nx">end</span><span class="p">()</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">python3_host_prog</span> <span class="p">=</span> <span class="nx">expand</span><span class="p">(</span><span class="s1">&#39;C:/Python38/python.exe&#39;</span><span class="p">)</span> <span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; setup rust_analyzer LSP (IDE features)</span><span class="err">
</span><span class="err"></span><span class="nx">lua</span> <span class="nx">require</span><span class="s1">&#39;nvim_lsp&#39;</span>.<span class="nx">rust_analyzer</span>.<span class="nx">setup</span>{}<span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Use LSP omni-completion in Rust files</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">Filetype</span> <span class="nx">rust</span> <span class="nx">setlocal</span> <span class="nx">omnifunc</span><span class="p">=</span><span class="nx">v</span>:<span class="nx">lua</span>.<span class="nx">vim</span>.<span class="nx">lsp</span>.<span class="nx">omnifunc</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Enable deoplete autocompletion in Rust files</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">deoplete</span>#<span class="nx">enable_at_startup</span> <span class="p">=</span> <span class="m">1</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; customise deoplete                                                                                                                                                     &#34; maximum candidate window length</span><span class="err">
</span><span class="err"></span><span class="nx">call</span> <span class="nx">deoplete</span>#<span class="nx">custom</span>#<span class="nx">source</span><span class="p">(</span><span class="s1">&#39;_&#39;</span><span class="p">,</span> <span class="s1">&#39;max_menu_width&#39;</span><span class="p">,</span> <span class="m">80</span><span class="p">)</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; Press Tab to scroll _down_ a list of auto-completions</span><span class="err">
</span><span class="err"></span><span class="k">let</span> <span class="nx">g</span>:<span class="nx">SuperTabDefaultCompletionType</span> <span class="p">=</span> <span class="s2">&#34;&lt;c-n&gt;&#34;</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34; rustfmt on write using autoformat</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">BufWrite</span> * :<span class="nx">Autoformat</span><span class="err">
</span><span class="err"></span><span class="c">
</span><span class="c">&#34;TODO: clippy on write</span><span class="err">
</span><span class="err"></span><span class="nx">autocmd</span> <span class="nx">BufWrite</span> * :<span class="nx">Autoformat</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="nx">nnoremap</span> <span class="p">&lt;</span><span class="nx">leader</span><span class="p">&gt;</span><span class="nx">c</span> :<span class="p">!</span><span class="nx">cargo</span> <span class="nx">clippy</span><span class="err">
</span></code></pre></div><p><strong>Important.</strong> I just combind the contents of the Internet, the source of each sections are included in the text.</p>]]></content></item><item><title>How to fix prevent repeating 'local master browser' log</title><link>https://seungrye.github.io/posts/2019-12-30-fix-nmbd-local-master-warning/</link><pubDate>Mon, 30 Dec 2019 21:20:32 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-12-30-fix-nmbd-local-master-warning/</guid><description>&lt;p>How to fix repeating following log on syslog?&lt;/p></description><content type="html"><![CDATA[<p>How to fix repeating following log on syslog?</p>
<pre tabindex="0"><code>Dec 31 06:05:34 handmade-omv5 nmbd[9739]: [2019/12/31 06:05:34.797089,  0] ../source3/nmbd/nmbd_become_lmb.c:397(become_local_master_stage2)
Dec 31 06:05:34 handmade-omv5 nmbd[9739]:   *****
Dec 31 06:05:34 handmade-omv5 nmbd[9739]:   
Dec 31 06:05:34 handmade-omv5 nmbd[9739]:   Samba name server HANDMADE-OMV5 is now a local master browser for workgroup WORKGROUP on subnet 169.254.45.94
Dec 31 06:05:34 handmade-omv5 nmbd[9739]:   
Dec 31 06:05:34 handmade-omv5 nmbd[9739]:   *****
</code></pre><p>Add following line to global on /etc/samba/smb.conf</p>
<pre tabindex="0"><code>local master = no
</code></pre><p>The configuration file should following.</p>
<pre tabindex="0"><code>$ head /etc/samba/smb.conf
#======================= Global Settings =======================
[global]
workgroup = WORKGROUP
server string = %h server
# Extra options
local master = no
</code></pre>]]></content></item><item><title>Sentimental_these_days</title><link>https://seungrye.github.io/posts/2019-11-11-sentimental_these_days/</link><pubDate>Mon, 11 Nov 2019 20:19:13 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-11-11-sentimental_these_days/</guid><description>&lt;p>Lecently I have more and more sentimental these days.&lt;/p></description><content type="html"><![CDATA[<p>Lecently I have more and more sentimental these days.</p>
<p>When I remember my parents, I more sentimental.
My parent are old. and getting older.</p>
<p>That makes me sad. and more sad as times goes by.</p>
<p>When I young, I don&rsquo;t care about life and family (parent, brothers, etc)
That&rsquo;s stupid.</p>
<p>Old saying are right. but I don&rsquo;t understand when I young.</p>
<p>I dont know sentimental emotion as I get older.</p>
<p>But time to time. I feel crying.
crying.. cry. so sad.</p>]]></content></item><item><title>SHA256 hash on File via Python</title><link>https://seungrye.github.io/posts/2019-11-10-sha256-file-via-python/</link><pubDate>Sun, 10 Nov 2019 19:34:25 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-11-10-sha256-file-via-python/</guid><description>&lt;p>When check hash code of file with python.&lt;/p></description><content type="html"><![CDATA[<p>When check hash code of file with python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">glob</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">hashlib</span>

<span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">iglob</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span> <span class="s1">&#39;*.rar&#39;</span><span class="p">)):</span>
    <span class="n">sha256_hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha256</span><span class="p">()</span>

    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;working on </span><span class="si">{file}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">filename</span><span class="p">))</span>
	    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s2">&#34;rb&#34;</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
	        <span class="k">for</span> <span class="n">byte_block</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1024</span> <span class="o">*</span> <span class="mi">64</span><span class="p">),</span> <span class="sa">b</span><span class="s2">&#34;&#34;</span><span class="p">):</span>
	            <span class="n">sha256_hash</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">byte_block</span><span class="p">)</span>
	    
    <span class="nb">print</span><span class="p">(</span><span class="s2">&#34;&gt;&gt;&gt;&gt; hash : </span><span class="si">{hash}</span><span class="s2">&#34;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">file</span><span class="o">=</span><span class="n">filename</span><span class="p">,</span> <span class="nb">hash</span><span class="o">=</span><span class="n">sha256_hash</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()))</span>
</code></pre></div><p>Omitted the detailed description.</p>]]></content></item><item><title>Howto move files under child directories to somewhere via Python</title><link>https://seungrye.github.io/posts/2019-11-02-howto-move-files-under-child-directories-to-somewhere-via-python/</link><pubDate>Sat, 02 Nov 2019 02:13:42 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-11-02-howto-move-files-under-child-directories-to-somewhere-via-python/</guid><description>&lt;p>When I need to move all &lt;code>.zip&lt;/code> files to &lt;code>/sharedfolders&lt;/code>, how should I do?&lt;/p></description><content type="html"><![CDATA[<p>When I need to move all <code>.zip</code> files to <code>/sharedfolders</code>, how should I do?</p>
<pre tabindex="0"><code>/sharedfolders/Archives/A/A.zip
/sharedfolders/Archives/A/B/AB.zip
/sharedfolders/Archives/B/B.zip
/sharedfolders/Archives/A/C/C.zip
/sharedfolders/Archives/A/D.zip
... (hundreds of subdirectories)

----

$ pwd
/sharedfolders
</code></pre><p>Manually move file is not a good solution :P
Do it with python.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">glob</span>
<span class="kn">import</span> <span class="nn">shutil</span>

<span class="n">path</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;/sharedfolders/Archives&#34;&#34;&#34;</span>
<span class="n">files</span> <span class="o">=</span> <span class="p">[</span><span class="n">f</span> <span class="k">for</span> <span class="n">f</span> <span class="ow">in</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="n">path</span> <span class="o">+</span> <span class="s2">&#34;/**/*.zip&#34;</span><span class="p">,</span> <span class="n">recursive</span><span class="o">=</span><span class="kc">True</span><span class="p">)]</span>
<span class="k">for</span> <span class="n">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
	<span class="n">file_name</span> <span class="o">=</span> <span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">basename</span><span class="p">(</span><span class="n">file</span><span class="p">)</span>
	<span class="n">shutil</span><span class="o">.</span><span class="n">move</span><span class="p">(</span><span class="n">file</span><span class="p">,</span> <span class="n">path</span><span class="o">+</span><span class="s2">&#34;/&#34;</span><span class="o">+</span><span class="n">file_name</span><span class="p">)</span>
</code></pre></div>]]></content></item><item><title>What's the problem on this cpp code?</title><link>https://seungrye.github.io/posts/2019-07-03-copy-constructor-error-on-cpp/</link><pubDate>Wed, 03 Jul 2019 20:49:33 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-07-03-copy-constructor-error-on-cpp/</guid><description>&lt;p>Notice! This post is disaster. meaningless. just waste your time. :(&lt;br>
&lt;strong>I&amp;rsquo;ve warn you&lt;/strong>.&lt;/p>
&lt;p>Trying to dig the error on following c++ code.&lt;/p></description><content type="html"><![CDATA[<p>Notice! This post is disaster. meaningless. just waste your time. :(<br>
<strong>I&rsquo;ve warn you</strong>.</p>
<p>Trying to dig the error on following c++ code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">struct</span> <span class="nc">NoImplicitCopy</span> <span class="p">{</span>
	<span class="n">NoImplicitCopy</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
	<span class="k">explicit</span> <span class="nf">NoImplicitCopy</span><span class="p">(</span><span class="k">const</span> <span class="n">NoImplicitCopy</span><span class="o">&amp;</span> <span class="p">)</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="p">};</span>

<span class="n">NoImplicitCopy</span> <span class="nf">foo</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">NoImplicitCopy</span> <span class="n">n</span><span class="p">;</span>
	<span class="k">return</span> <span class="n">n</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">bar</span><span class="p">(</span><span class="n">NoImplicitCopy</span> <span class="n">n</span><span class="p">)</span>
<span class="p">{</span> <span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">NoImplicitCopy</span>  <span class="n">n</span><span class="p">;</span>
	<span class="n">NoImplicitCopy</span> <span class="n">x</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

	<span class="n">n</span> <span class="o">=</span> <span class="n">foo</span><span class="p">();</span>

	<span class="n">bar</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>

    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>from <a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Non-copyable_Mixin#Solution_and_Sample_Code">Explicit copy-constructor</a></p>
<p>When I compile above code, I got following error message. and I don&rsquo;t understand why the error occurred.<br>
Even if I read the <code>Explicit copy-constructor</code> web page. :(</p>
<p>What a dumb head and dumber my intelligence.<br>
Anyway&hellip; the error message is like followings.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enjian@localhost build<span class="o">]</span>$ g++ main.cpp
main.cpp: In <span class="k">function</span> ‘NoImplicitCopy foo<span class="o">()</span>’:
main.cpp:11:9: error: no matching <span class="k">function</span> <span class="k">for</span> call to ‘NoImplicitCopy::NoImplicitCopy<span class="o">(</span>NoImplicitCopy<span class="p">&amp;</span><span class="o">)</span>’
   <span class="m">11</span> <span class="p">|</span>  <span class="k">return</span> n<span class="p">;</span>
      <span class="p">|</span>         ^
main.cpp:4:2: note: candidate: ‘constexpr NoImplicitCopy::NoImplicitCopy<span class="o">()</span>’
    <span class="m">4</span> <span class="p">|</span>  NoImplicitCopy<span class="o">()</span> <span class="o">=</span> default<span class="p">;</span>
      <span class="p">|</span>  ^~~~~~~~~~~~~~
main.cpp:4:2: note:   candidate expects <span class="m">0</span> arguments, <span class="m">1</span> provided
main.cpp: In <span class="k">function</span> ‘int main<span class="o">()</span>’:
main.cpp:23:7: error: no matching <span class="k">function</span> <span class="k">for</span> call to ‘NoImplicitCopy::NoImplicitCopy<span class="o">(</span>NoImplicitCopy<span class="p">&amp;</span><span class="o">)</span>’
   <span class="m">23</span> <span class="p">|</span>  bar<span class="o">(</span>n<span class="o">)</span><span class="p">;</span>
      <span class="p">|</span>       ^
main.cpp:4:2: note: candidate: ‘constexpr NoImplicitCopy::NoImplicitCopy<span class="o">()</span>’
    <span class="m">4</span> <span class="p">|</span>  NoImplicitCopy<span class="o">()</span> <span class="o">=</span> default<span class="p">;</span>
      <span class="p">|</span>  ^~~~~~~~~~~~~~
main.cpp:4:2: note:   candidate expects <span class="m">0</span> arguments, <span class="m">1</span> provided
main.cpp:14:25: note:   initializing argument <span class="m">1</span> of ‘void bar<span class="o">(</span>NoImplicitCopy<span class="o">)</span>’
   <span class="m">14</span> <span class="p">|</span> void bar<span class="o">(</span>NoImplicitCopy n<span class="o">)</span>
      <span class="p">|</span>          ~~~~~~~~~~~~~~~^
<span class="o">[</span>enjian@localhost build<span class="o">]</span>$
</code></pre></div><p>Let&rsquo;s find out what is the problem.</p>
<p>&hellip;few days later&hellip;</p>
<p>Figure out the source of error message. But still don&rsquo;t know the reason. :(<br>
To compile, just remove <code>explicit</code> keyword. but why? why?? why???</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"> struct NoImplicitCopy {
        NoImplicitCopy() = default;
<span class="gd">-       explicit NoImplicitCopy(const NoImplicitCopy&amp; ) = default;
</span><span class="gd"></span><span class="gi">+       NoImplicitCopy(NoImplicitCopy&amp;) = default;
</span><span class="gi"></span> };
</code></pre></div><p>The result is.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enjian@localhost build<span class="o">]</span>$ g++ main.cpp
<span class="o">[</span>enjian@localhost build<span class="o">]</span>$
</code></pre></div><p>Let&rsquo;s found out what the <code>explicit</code> keyword doing.</p>
<p><del>And, I found the similar questions on stackoverflow.</del>\</p>
<ul>
<li><del><a href="https://stackoverflow.com/questions/11480545/explicit-copy-constructor">Explicit copy constructor</a></del>\</li>
<li><del><a href="https://stackoverflow.com/questions/29472565/explicit-copy-constructor-compile-error">explicit copy constructor compile error</a></del>\</li>
</ul>
<p><del>There are very important quote.</del>\</p>
<blockquote>
<p><del><code>Foo copy = original</code>. The same happens when passing/returning to/from a function&hellip;</del></p>
</blockquote>
<blockquote>
<p><del>The explicit copy constructor means that the copy constructor will not be called implicitly, which is what happens in the expression:</del><br>
<del><code>CustomString s = CustomString(&quot;test&quot;)</code></del><br>
<del>This expression literally means: create a temporary <code>CustomString</code> using the constructor that takes a <code>const char*</code>. Implicitly call the copy constructor of <code>CustomString</code> to copy from that temporary info <code>s</code>.</del><br>
<del>You can call the copy constructor explicitly:</del><br>
<del><code>CustomString s(CustomString(&quot;test&quot;))</code></del></p>
</blockquote>
<p>In, cpprefernce has document about <a href="https://en.cppreference.com/w/cpp/language/explicit">explicit specifier</a>.<br>
And it saids as follows (and has example code).</p>
<blockquote>
<ol>
<li>Specifies that a constructor or conversion frunction is explicit, that is, it <strong>cannot be used for</strong> implicit conversion and <strong>copy-initialization</strong>.</li>
</ol>
</blockquote>
<p>What The&hellip;</p>
<p>In the <a href="https://en.cppreference.com/w/cpp/language/copy_initialization">copy initialization</a> has advert about above sentences.</p>
<blockquote>
<p>If T is a class type and the cv-unqualified version of the type of <em>other</em> is T or a class derived from T, the <strong>non-explicit constructiors of T are examined</strong> and the best match is selected by overload resolution. The constructor is then called to initialize the object.</p>
</blockquote>
<p>&hellip;Anyway. The conclusion is &lsquo;Do NOT append <code>explicit</code> specifier where use copy constructor.&rsquo;</p>
<p>And that&rsquo;s the SPEC!</p>]]></content></item><item><title>SSH login without password</title><link>https://seungrye.github.io/posts/2019-07-02-ssh-login-without-password/</link><pubDate>Tue, 02 Jul 2019 02:48:42 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-07-02-ssh-login-without-password/</guid><description>&lt;p>When I connect other pc via ssh command, I always type password.
That&amp;rsquo;s very annoying. :(&lt;/p>
&lt;p>Is it possible connect without type password? And, the answer is YES.&lt;/p></description><content type="html"><![CDATA[<p>When I connect other pc via ssh command, I always type password.
That&rsquo;s very annoying. :(</p>
<p>Is it possible connect without type password? And, the answer is YES.</p>
<p>tl;dr</p>
<ol>
<li>copy my pc&rsquo;s public key to remote pc.</li>
<li>append public key to <code>authorized_keys</code> file on remote pc.</li>
<li>connect it.</li>
</ol>
<h2 id="generate-ssh-key">Generate ssh key.</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enji@localhost ~<span class="o">]</span>$ ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key <span class="o">(</span>/home/enji/.ssh/id_rsa<span class="o">)</span>:
Created directory <span class="s1">&#39;/home/enji/.ssh&#39;</span>.
Enter passphrase <span class="o">(</span>empty <span class="k">for</span> no passphrase<span class="o">)</span>:
Enter same passphrase again:
Your identification has been saved in /home/enji/.ssh/id_rsa.
Your public key has been saved in /home/enji/.ssh/id_rsa.pub.
The key fingerprint is:
SHA256:nCnkdmVbuXjHY0NyP+bROE1J/NVP3HMUdMR7tDDOLU8 enji@localhost
The key<span class="err">&#39;</span>s randomart image is:
+---<span class="o">[</span>RSA 3072<span class="o">]</span>----+
<span class="p">|</span>              oOB<span class="p">|</span>
<span class="p">|</span>             +.o%<span class="p">|</span>
<span class="p">|</span>      .   o * *+X<span class="p">|</span>
<span class="p">|</span>     o . <span class="o">=</span> + X <span class="nv">E</span><span class="o">=</span><span class="p">|</span>
<span class="p">|</span>      + S o o %+<span class="o">=</span><span class="p">|</span>
<span class="p">|</span>     . o   . <span class="nv">oo</span><span class="o">=</span>o<span class="p">|</span>
<span class="p">|</span>               . <span class="p">|</span>
<span class="p">|</span>                 <span class="p">|</span>
<span class="p">|</span>                 <span class="p">|</span>
+----<span class="o">[</span>SHA256<span class="o">]</span>-----+
<span class="o">[</span>enji@localhost ~<span class="o">]</span>$
</code></pre></div><h2 id="copy-to-remote-pc">Copy to remote pc</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enji@localhost ~<span class="o">]</span>$ scp <span class="nv">$HOME</span>/.ssh/id_rsa.pub enji@192.168.0.4:id_rsa.pub
enji@192.168.0.4<span class="err">&#39;</span>s password:
id_rsa.pub                                                                                    100%  <span class="m">408</span>    46.9KB/s   00:00
</code></pre></div><h2 id="append-to-authorized_keys">Append to <code>authorized_keys</code></h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enji@localhost ~<span class="o">]</span>$ ssh enji@192.168.0.4
enji@192.168.0.4<span class="err">&#39;</span>s password:
Linux home_server 4.9.0-9-amd64 <span class="c1">#1 SMP Debian 4.9.168-1+deb9u3 (2019-06-16) x86_64</span>

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
No mail.
Last login: Thu Jun <span class="m">27</span> 21:42:31 <span class="m">2019</span> from 192.168.0.1
enji@home_server:~$ cat id_rsa.pub &gt;&gt; <span class="nv">$HOME</span>/.ssh/authorized_keys
enji@home_server:~$ <span class="nb">exit</span>
</code></pre></div><h2 id="connect">Connect</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>enji@localhost ~<span class="o">]</span>$ ssh enji@192.168.0.4
Linux home_server 4.9.0-9-amd64 <span class="c1">#1 SMP Debian 4.9.168-1+deb9u3 (2019-06-16) x86_64</span>

The programs included with the Debian GNU/Linux system are free software<span class="p">;</span>
the exact distribution terms <span class="k">for</span> each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
No mail.
Last login: Tue Jul  <span class="m">2</span> 02:57:51 <span class="m">2019</span> from 192.168.0.45
enji@home_server:~$ <span class="nb">exit</span>
</code></pre></div><p>Actually, this tip is for me. :P</p>]]></content></item><item><title>Python regex contents in curly braces</title><link>https://seungrye.github.io/posts/2019-06-20-python-regex-contents-in-curly-braces/</link><pubDate>Thu, 20 Jun 2019 23:18:49 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-20-python-regex-contents-in-curly-braces/</guid><description>&lt;p>When I want to extract contents between curly braces using python+regex.&lt;/p></description><content type="html"><![CDATA[<p>When I want to extract contents between curly braces using python+regex.</p>
<p>The content is following.</p>
<pre tabindex="0"><code>void on_sent(
    boost::shared_ptr&lt;boost::asio::ip::udp::endpoint&gt; ep_from, // ep to response
    boost::shared_ptr&lt;std::vector&lt;uint8_t&gt;&gt; buffer,
    boost::system::error_code const&amp; ec,
    std::size_t const&amp; bytes_tranferred)
{
    if (ec)
    {
        std::cerr&lt;&lt;__func__&lt;&lt;&quot;() error code : &quot;&lt;&lt;ec.message()&lt;&lt;std::endl;
        return ;
    }

    std::cout&lt;&lt;__func__&lt;&lt;&quot;() sent &quot;&lt;&lt;bytes_tranferred&lt;&lt;&quot; bytes&quot;&lt;&lt;std::endl;
}
</code></pre><p>When I extract content between <code>if (ec) { ... }</code> I should use following code.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="kn">import</span> <span class="nn">re</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">contents</span> <span class="o">=</span> <span class="s2">&#34;&#34;&#34;void on_sent(
</span><span class="s2">... boost::shared_ptr&lt;boost::asio::ip::udp::endpoint&gt; ep_from, // ep to response
</span><span class="s2">...     boost::shared_ptr&lt;std::vector&lt;uint8_t&gt;&gt; buffer,
</span><span class="s2">...     boost::system::error_code const&amp; ec,
</span><span class="s2">...     std::size_t const&amp; bytes_tranferred)
</span><span class="s2">... {
</span><span class="s2">...     if (ec)
</span><span class="s2">...     {
</span><span class="s2">...         std::cerr&lt;&lt;__func__&lt;&lt;&#34;() error code : &#34;&lt;&lt;ec.message()&lt;&lt;std::endl;
</span><span class="s2">...         return ;
</span><span class="s2">...     }
</span><span class="s2">... 
</span><span class="s2">...     std::cout&lt;&lt;__func__&lt;&lt;&#34;() sent &#34;&lt;&lt;bytes_tranferred&lt;&lt;&#34; bytes&#34;&lt;&lt;std::endl;
</span><span class="s2">... }&#34;&#34;&#34;</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;if.*?\{(.*?)\}&#34;</span><span class="p">,</span> <span class="n">contents</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span> <span class="o">|</span> <span class="n">re</span><span class="o">.</span><span class="n">DOTALL</span><span class="p">)</span>
<span class="p">[</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">        std::cerr&lt;&lt;__func__&lt;&lt;&#34;() error code : &#34;&lt;&lt;ec.message()&lt;&lt;std::endl;</span><span class="se">\n</span><span class="s1">        return ;</span><span class="se">\n</span><span class="s1">    &#39;</span><span class="p">]</span>
</code></pre></div><p>Note. I don&rsquo;t know this is right answer. (maybe not :P ) but, anyway It works.</p>
<p>How about whole function?</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;on_sent.*?\{(.*?)\}&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span> <span class="o">|</span> <span class="n">re</span><span class="o">.</span><span class="n">DOTALL</span><span class="p">)</span>
<span class="p">[</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">    if (ec)</span><span class="se">\n</span><span class="s1">    {</span><span class="se">\n</span><span class="s1">        std::cerr&lt;&lt;__func__&lt;&lt;&#34;() error code : &#34;&lt;&lt;ec.message()&lt;&lt;std::endl;</span><span class="se">\n</span><span class="s1">        return ;</span><span class="se">\n</span><span class="s1">    &#39;</span><span class="p">]</span>
</code></pre></div><p>This is not what I want. So sad. :(</p>
<p>How can I fix? Before fix code, I should understand what the regex meaning is.</p>
<p>ref : <a href="https://wikidocs.net/4309#greedy-vs-non-greedy">greedy-vs-non-greedy</a></p>
<ul>
<li><code>.*</code> : greedy search (return maxmium statisfied length string)</li>
<li><code>.*?</code> : non-greedy search (return minimum satistfied length string)</li>
</ul>
<p>Oh, Then the problem could resolve easily.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="o">&gt;&gt;&gt;</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="sa">r</span><span class="s2">&#34;on_sent.*?\{(.*)\}&#34;</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">MULTILINE</span> <span class="o">|</span> <span class="n">re</span><span class="o">.</span><span class="n">DOTALL</span><span class="p">)</span>
<span class="p">[</span><span class="s1">&#39;</span><span class="se">\n</span><span class="s1">    if (ec)</span><span class="se">\n</span><span class="s1">    {</span><span class="se">\n</span><span class="s1">        std::cerr&lt;&lt;__func__&lt;&lt;&#34;() error code : &#34;&lt;&lt;ec.message()&lt;&lt;std::endl;</span><span class="se">\n</span><span class="s1">        return ;</span><span class="se">\n</span><span class="s1">    }</span><span class="se">\n\n</span><span class="s1">    std::cout&lt;&lt;__func__&lt;&lt;&#34;() sent &#34;&lt;&lt;bytes_tranferred&lt;&lt;&#34; bytes&#34;&lt;&lt;std::endl;</span><span class="se">\n</span><span class="s1">&#39;</span><span class="p">]</span>
</code></pre></div><p>What an easy!</p>]]></content></item><item><title>No default toolchain configured error when run rustc</title><link>https://seungrye.github.io/posts/2019-06-17-no-default-toolchain-configured-on-rls/</link><pubDate>Mon, 17 Jun 2019 20:33:49 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-17-no-default-toolchain-configured-on-rls/</guid><description>&lt;p>How to fix the &lt;code>error: no default toolchain configured&lt;/code> error on rust.&lt;/p></description><content type="html"><![CDATA[<p>How to fix the <code>error: no default toolchain configured</code> error on rust.</p>
<p>I got following error when run rls or rustc</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rustc
error: no default toolchain configured
</code></pre></div><p>The answer is fairly simple. just instll stable and set default. that&rsquo;s it.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ rustup install stable
info: syncing channel updates <span class="k">for</span> <span class="s1">&#39;stable-x86_64-unknown-linux-gnu&#39;</span>
info: latest update on 2019-05-23, rust version 1.35.0 <span class="o">(</span>3c235d560 2019-05-20<span class="o">)</span>
info: downloading component <span class="s1">&#39;rustc&#39;</span>
 88.4 MiB /  88.4 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>   7.8 MiB/s in 12s ETA:  0s
info: downloading component <span class="s1">&#39;rust-std&#39;</span>
 59.1 MiB /  59.1 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>   6.9 MiB/s in  8s ETA:  0s
info: downloading component <span class="s1">&#39;cargo&#39;</span>
info: downloading component <span class="s1">&#39;rust-docs&#39;</span>
 10.4 MiB /  10.4 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>   6.5 MiB/s in  1s ETA:  0s
info: installing component <span class="s1">&#39;rustc&#39;</span>
 88.4 MiB /  88.4 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>  14.4 MiB/s in  6s ETA:  0s
info: installing component <span class="s1">&#39;rust-std&#39;</span>
 59.1 MiB /  59.1 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>  17.3 MiB/s in  3s ETA:  0s
info: installing component <span class="s1">&#39;cargo&#39;</span>
info: installing component <span class="s1">&#39;rust-docs&#39;</span>
 10.4 MiB /  10.4 MiB <span class="o">(</span><span class="m">100</span> %<span class="o">)</span>   6.9 MiB/s in  1s ETA:  0s

  stable-x86_64-unknown-linux-gnu installed - rustc 1.35.0 <span class="o">(</span>3c235d560 2019-05-20<span class="o">)</span>

$ rustup default stable
info: using existing install <span class="k">for</span> <span class="s1">&#39;stable-x86_64-unknown-linux-gnu&#39;</span>
info: default toolchain <span class="nb">set</span> to <span class="s1">&#39;stable-x86_64-unknown-linux-gnu&#39;</span>

  stable-x86_64-unknown-linux-gnu unchanged - rustc 1.35.0 <span class="o">(</span>3c235d560 2019-05-20<span class="o">)</span>

$ rustc
Usage: rustc <span class="o">[</span>OPTIONS<span class="o">]</span> INPUT

Options:
    -h, --help          Display this message
</code></pre></div><p>simple. isn&rsquo;t it?</p>]]></content></item><item><title>Why my udp socket lost buffer</title><link>https://seungrye.github.io/posts/2019-06-16-udp-socket-connection-missed-buffer/</link><pubDate>Sun, 16 Jun 2019 00:29:10 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-16-udp-socket-connection-missed-buffer/</guid><description>&lt;p>When I connect via udp socket, I got buffer lost issue. and I don&amp;rsquo;t know why.&lt;/p>
&lt;p>Let&amp;rsquo;s find out why.&lt;/p>
&lt;p>Warning. I use heavyly broken english. I let you know. :P&lt;/p></description><content type="html"><![CDATA[<p>When I connect via udp socket, I got buffer lost issue. and I don&rsquo;t know why.</p>
<p>Let&rsquo;s find out why.</p>
<p>Warning. I use heavyly broken english. I let you know. :P</p>
<p>I use following code.</p>
<p>Of receiver.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/make_shared.hpp&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/asio.hpp&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/bind.hpp&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">7003</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">on_recv</span><span class="p">(</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">socket</span><span class="o">&gt;</span> <span class="n">socket</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span> <span class="n">ep_from</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span> <span class="n">buffer</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ec</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">bytes_tranferred</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Enter&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span> <span class="n">io_service</span><span class="p">;</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">::</span><span class="n">work</span> <span class="n">worker</span><span class="p">(</span><span class="n">io_service</span><span class="p">);</span>

    <span class="k">auto</span> <span class="kr">thread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([</span><span class="o">&amp;</span><span class="n">io_service</span><span class="p">](){</span> <span class="n">io_service</span><span class="p">.</span><span class="n">run</span><span class="p">();</span> <span class="p">}));</span>
    <span class="n">assert</span><span class="p">(</span><span class="kr">thread</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>


    <span class="k">auto</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">socket</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="n">io_service</span><span class="p">,</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="p">(</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">v4</span><span class="p">(),</span>
            <span class="n">port</span><span class="p">));</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span> <span class="c1">// 10 byte length
</span><span class="c1"></span>    <span class="n">assert</span><span class="p">(</span><span class="n">buffer</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">ep_from</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span><span class="p">();</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ep_from</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="n">socket</span><span class="o">-&gt;</span><span class="n">async_receive_from</span><span class="p">(</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">),</span>
        <span class="o">*</span><span class="n">ep_from</span><span class="p">,</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">on_recv</span><span class="p">,</span>
            <span class="n">socket</span><span class="p">,</span>
            <span class="n">ep_from</span><span class="p">,</span>
            <span class="n">buffer</span><span class="p">,</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">,</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">bytes_transferred</span><span class="p">));</span>

    <span class="kr">thread</span><span class="o">-&gt;</span><span class="n">join</span><span class="p">();</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Exit&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">on_recv</span><span class="p">(</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">socket</span><span class="o">&gt;</span> <span class="n">socket</span><span class="p">,</span> <span class="c1">// local socket
</span><span class="c1"></span>    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span> <span class="n">ep_from</span><span class="p">,</span> <span class="c1">// ep to response
</span><span class="c1"></span>    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span> <span class="n">buffer</span><span class="p">,</span> <span class="c1">// received buffer
</span><span class="c1"></span>    <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ec</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">bytes_tranferred</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ec</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span><span class="o">&lt;&lt;</span><span class="n">__func__</span><span class="o">&lt;&lt;</span><span class="s">&#34;() error code : &#34;</span><span class="o">&lt;&lt;</span><span class="n">ec</span><span class="p">.</span><span class="n">message</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">__func__</span><span class="o">&lt;&lt;</span><span class="s">&#34;() recv &#34;</span><span class="o">&lt;&lt;</span><span class="n">bytes_tranferred</span><span class="o">&lt;&lt;</span><span class="s">&#34; bytes&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">message</span><span class="p">(</span><span class="n">buffer</span><span class="o">-&gt;</span><span class="n">begin</span><span class="p">(),</span> <span class="n">buffer</span><span class="o">-&gt;</span><span class="n">end</span><span class="p">());</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">__func__</span><span class="o">&lt;&lt;</span><span class="s">&#34;() received message : &#34;</span><span class="o">&lt;&lt;</span><span class="n">message</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>


    <span class="n">socket</span><span class="o">-&gt;</span><span class="n">async_receive_from</span><span class="p">(</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">),</span>
        <span class="o">*</span><span class="n">ep_from</span><span class="p">,</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">on_recv</span><span class="p">,</span>
            <span class="n">socket</span><span class="p">,</span>
            <span class="n">ep_from</span><span class="p">,</span>
            <span class="n">buffer</span><span class="p">,</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">,</span>
            <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">bytes_transferred</span><span class="p">));</span>
<span class="p">}</span>
</code></pre></div><p>Of sender.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;thread&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cstdint&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;cassert&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/make_shared.hpp&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/asio.hpp&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;boost/bind.hpp&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">7003</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">on_sent</span><span class="p">(</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span> <span class="n">ep_from</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span> <span class="n">buffer</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ec</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">bytes_tranferred</span><span class="p">);</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Enter&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>

    <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span> <span class="n">io_service</span><span class="p">;</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">io_service</span><span class="o">::</span><span class="n">work</span> <span class="n">worker</span><span class="p">(</span><span class="n">io_service</span><span class="p">);</span>

    <span class="k">auto</span> <span class="kr">thread</span> <span class="o">=</span> <span class="n">std</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="o">&gt;</span><span class="p">(</span><span class="k">new</span> <span class="n">std</span><span class="o">::</span><span class="kr">thread</span><span class="p">([</span><span class="o">&amp;</span><span class="n">io_service</span><span class="p">](){</span> <span class="n">io_service</span><span class="p">.</span><span class="n">run</span><span class="p">();</span> <span class="p">}));</span>
    <span class="n">assert</span><span class="p">(</span><span class="kr">thread</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>


    <span class="k">auto</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">socket</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="n">io_service</span><span class="p">,</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="p">());</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="k">auto</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span><span class="p">();</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">buffer</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">hello</span> <span class="o">=</span> <span class="s">&#34;HELLO UDP WORLD&#34;</span><span class="p">;</span>
    <span class="n">buffer</span><span class="o">-&gt;</span><span class="n">assign</span><span class="p">(</span><span class="n">hello</span><span class="p">.</span><span class="n">begin</span><span class="p">(),</span> <span class="n">hello</span><span class="p">.</span><span class="n">end</span><span class="p">());</span>

    <span class="k">auto</span> <span class="n">ep_from</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">make_shared</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span><span class="p">(</span>
        <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">v4</span><span class="p">(),</span>
        <span class="n">port</span><span class="p">);</span>
    <span class="n">assert</span><span class="p">(</span><span class="n">ep_from</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">);</span>

    <span class="n">socket</span><span class="o">-&gt;</span><span class="n">async_send_to</span><span class="p">(</span>
       <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">buffer</span><span class="p">(</span><span class="o">*</span><span class="n">buffer</span><span class="p">),</span>
       <span class="o">*</span><span class="n">ep_from</span><span class="p">,</span>
       <span class="n">boost</span><span class="o">::</span><span class="n">bind</span><span class="p">(</span><span class="n">on_sent</span><span class="p">,</span>
           <span class="n">ep_from</span><span class="p">,</span>
           <span class="n">buffer</span><span class="p">,</span> <span class="c1">// prevent to loose reference count
</span><span class="c1"></span>           <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">error</span><span class="p">,</span>
           <span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">placeholders</span><span class="o">::</span><span class="n">bytes_transferred</span><span class="p">));</span>

    <span class="kr">thread</span><span class="o">-&gt;</span><span class="n">join</span><span class="p">();</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&#34;Exit&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">EXIT_SUCCESS</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">on_sent</span><span class="p">(</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">boost</span><span class="o">::</span><span class="n">asio</span><span class="o">::</span><span class="n">ip</span><span class="o">::</span><span class="n">udp</span><span class="o">::</span><span class="n">endpoint</span><span class="o">&gt;</span> <span class="n">ep_from</span><span class="p">,</span> <span class="c1">// ep to response
</span><span class="c1"></span>    <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">uint8_t</span><span class="o">&gt;&gt;</span> <span class="n">buffer</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">ec</span><span class="p">,</span>
    <span class="n">std</span><span class="o">::</span><span class="n">size_t</span> <span class="k">const</span><span class="o">&amp;</span> <span class="n">bytes_tranferred</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">ec</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">std</span><span class="o">::</span><span class="n">cerr</span><span class="o">&lt;&lt;</span><span class="n">__func__</span><span class="o">&lt;&lt;</span><span class="s">&#34;() error code : &#34;</span><span class="o">&lt;&lt;</span><span class="n">ec</span><span class="p">.</span><span class="n">message</span><span class="p">()</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
        <span class="k">return</span> <span class="p">;</span>
    <span class="p">}</span>

    <span class="n">std</span><span class="o">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="n">__func__</span><span class="o">&lt;&lt;</span><span class="s">&#34;() sent &#34;</span><span class="o">&lt;&lt;</span><span class="n">bytes_tranferred</span><span class="o">&lt;&lt;</span><span class="s">&#34; bytes&#34;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>And, I got following result.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ ./asio_udp_receiver_sample
Enter
on_recv<span class="o">()</span> recv <span class="m">10</span> bytes
on_recv<span class="o">()</span> received message : HELLO UDP 
</code></pre></div><p>As you can see, I got only half of buffer compare to original sent buffer. ( Where is the <code>WORLD</code> string?? :$ )
Of course, I set receiving buffer size to very small. but I read buffer repeatedly.
And still, got only first small buffer of string.</p>
<p>So, why is it??</p>
<p>In <code>UNIX Network Programming: The socket networking API</code> book has clue.</p>
<pre tabindex="0"><code>OS BSD-derived systems, when a UDP datagram arrives that is larger than the 
application's buffer, recvmsg sets the MSG_TRUNC flag in the msg_flags member
of the msghdr structure (Figure 14.7). All Berkeley-derived implementations 
that support the msghdr structure with the msg_flags member provide this 
notification.

Unfortunately, not all implementations handle a larger-than-expected UDP 
datagram in this fashion. There are three possible scenarios:
 1. Discard the excess bytes and return the MSG_TRUNC flag to the application. 
    This requires that the application call recvmsg to receive the flag.
 2. Discard the excess bytes, but do not tell the application.
 3. Keep the excess bytes and return them in subsequent read operations on the socket.

 Since there are such variations in how implementations handle datagrams that 
 are larger than the application's receive buffer, one way to detect the 
 problem is to always allocate an application buffer that is one byte greater 
 than the largest datagram the application should ever receive. 
 If a diagram is ever received whose length equals this buffer, consider it 
 an error.
</code></pre><p>So, there are 3 possible scenarios, and the third is not possible.
cause I already add subsequent read operation, but still has issue.</p>
<p>Then, let&rsquo;s find out <code>MSG_TRUNC</code> flag on the <code>msg_flags</code> that member of <code>msghdr</code> structure.</p>
<p>First of all, what <code>MSG_TRUNC</code> value is it??</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ cat /usr/include/bits/socket.h <span class="p">|</span> grep MSG_TRUNC
    <span class="nv">MSG_TRUNC</span>           <span class="o">=</span> 0x20,
<span class="c1">#define MSG_TRUNC       MSG_TRUNC</span>
</code></pre></div><p>I found the <code>msg_flags</code> variable on <code>boost::asio::detail::socket_ops::recvfrom(...)</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">signed_size_type</span> <span class="nf">recvfrom</span><span class="p">(</span><span class="n">socket_type</span> <span class="n">s</span><span class="p">,</span> <span class="n">buf</span><span class="o">*</span> <span class="n">bufs</span><span class="p">,</span> <span class="n">size_t</span> <span class="n">count</span><span class="p">,</span>
    <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">socket_addr_type</span><span class="o">*</span> <span class="n">addr</span><span class="p">,</span> <span class="n">std</span><span class="o">::</span><span class="n">size_t</span><span class="o">*</span> <span class="n">addrlen</span><span class="p">,</span>
    <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span><span class="o">&amp;</span> <span class="n">ec</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">clear_last_error</span><span class="p">();</span>
  <span class="n">msghdr</span> <span class="n">msg</span> <span class="o">=</span> <span class="n">msghdr</span><span class="p">();</span>
  <span class="n">init_msghdr_msg_name</span><span class="p">(</span><span class="n">msg</span><span class="p">.</span><span class="n">msg_name</span><span class="p">,</span> <span class="n">addr</span><span class="p">);</span>
  <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="o">*</span><span class="n">addrlen</span><span class="p">);</span>
  <span class="n">msg</span><span class="p">.</span><span class="n">msg_iov</span> <span class="o">=</span> <span class="n">bufs</span><span class="p">;</span>
  <span class="n">msg</span><span class="p">.</span><span class="n">msg_iovlen</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="n">count</span><span class="p">);</span>
  <span class="n">signed_size_type</span> <span class="n">result</span> <span class="o">=</span> <span class="n">error_wrapper</span><span class="p">(</span><span class="o">::</span><span class="n">recvmsg</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">msg</span><span class="p">,</span> <span class="n">flags</span><span class="p">),</span> <span class="n">ec</span><span class="p">);</span>
<span class="o">&gt;</span> <span class="o">*</span><span class="n">addrlen</span> <span class="o">=</span> <span class="n">msg</span><span class="p">.</span><span class="n">msg_namelen</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">result</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">ec</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">system</span><span class="o">::</span><span class="n">error_code</span><span class="p">();</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</code></pre></div><p>And I check <code>msg.msg_flags</code> after returned of <code>::recvmsg(s, &amp;msg, flags)</code>.</p>
<p>It is 0x20.</p>
<pre tabindex="0"><code class="language-lldb" data-lang="lldb">(lldb) bt
* thread #2, name = 'asio_udp_receiv', stop reason = step over
  * frame #0: 0x0000555555564780 asio_udp_receiver_sample1`boost::asio::detail::socket_ops::recvfrom(s=6, bufs=0x00007ffff7a6db10, count=1, flags=0, addr=0x000055555559983c, addrlen=0x00007ffff7a6db00, ec=0x0000555555599880) at socket_ops.ipp:941:18
    frame #1: 0x0000555555564839 asio_udp_receiver_sample1`boost::asio::detail::socket_ops::non_blocking_recvfrom(s=6, bufs=0x00007ffff7a6db10, count=1, flags=0, addr=0x000055555559983c, addrlen=0x00007ffff7a6db00, ec=0x0000555555599880, bytes_transferred=0x0000555555599890) at socket_ops.ipp:1015:50
    frame #2: 0x000055555556fda0 asio_udp_receiver_sample1`boost::asio::detail::reactive_socket_recvfrom_op_base&lt;boost::asio::mutable_buffers_1, boost::asio::ip::basic_endpoint&lt;boost::asio::ip::udp&gt; &gt;::do_perform(base=0x0000555555599860) at reactive_socket_recvfrom_op.hpp:57:54
    frame #3: 0x0000555555560de9 asio_udp_receiver_sample1`boost::asio::detail::reactor_op::perform(this=0x0000555555599860) at reactor_op.hpp:44:25
    frame #4: 0x0000555555562da3 asio_udp_receiver_sample1`boost::asio::detail::epoll_reactor::descriptor_state::perform_io(this=0x0000555555599700, events=1) at epoll_reactor.ipp:743:52
    frame #5: 0x0000555555562ed3 asio_udp_receiver_sample1`boost::asio::detail::epoll_reactor::descriptor_state::do_complete(owner=0x00005555555992d0, base=0x0000555555599700, ec=0x00007ffff7a6ddd0, bytes_transferred=1) at epoll_reactor.ipp:774:52
    frame #6: 0x000055555555f4c8 asio_udp_receiver_sample1`boost::asio::detail::scheduler_operation::complete(this=0x0000555555599700, owner=0x00005555555992d0, ec=0x00007ffff7a6ddd0, bytes_transferred=1) at scheduler_operation.hpp:40:10
    frame #7: 0x0000555555563b70 asio_udp_receiver_sample1`boost::asio::detail::scheduler::do_run_one(this=0x00005555555992d0, lock=0x00007ffff7a6dd30, this_thread=0x00007ffff7a6dd60, ec=0x00007ffff7a6ddd0) at scheduler.ipp:401:20
    frame #8: 0x00005555555635b5 asio_udp_receiver_sample1`boost::asio::detail::scheduler::run(this=0x00005555555992d0, ec=0x00007ffff7a6ddd0) at scheduler.ipp:154:20
    frame #9: 0x000055555556406a asio_udp_receiver_sample1`boost::asio::io_context::run(this=0x00007fffffffebe0) at io_context.ipp:62:27
    frame #10: 0x000055555555b7a5 asio_udp_receiver_sample1`operator(__closure=0x0000555555599418) at main.cpp:27:92
    frame #11: 0x000055555555c7d9 asio_udp_receiver_sample1`std::__invoke_impl&lt;void, main()::&lt;lambda()&gt; &gt;((null)=__invoke_other @ 0x00007ffff7a6de40, __f=0x0000555555599418)&gt; &amp;&amp;) at invoke.h:60:36
    frame #12: 0x000055555555c77a asio_udp_receiver_sample1`std::__invoke&lt;main()::&lt;lambda()&gt; &gt;(__fn=0x0000555555599418)&gt; &amp;&amp;) at invoke.h:95:40
    frame #13: 0x000055555555c718 asio_udp_receiver_sample1`std:🧵:_Invoker&lt;std::tuple&lt;main()::&lt;lambda()&gt; &gt; &gt;::_M_invoke&lt;0&gt;(this=0x0000555555599418, (null)=_Index_tuple&lt;0&gt; @ 0x00007ffff7a6de90) const at thread:244:26
    frame #14: 0x000055555555c6d9 asio_udp_receiver_sample1`std:🧵:_Invoker&lt;std::tuple&lt;main()::&lt;lambda()&gt; &gt; &gt;::operator(this=0x0000555555599418)() const at thread:251:31
    frame #15: 0x000055555555c6ae asio_udp_receiver_sample1`std:🧵:_State_impl&lt;std:🧵:_Invoker&lt;std::tuple&lt;main()::&lt;lambda()&gt; &gt; &gt; &gt;::_M_run(this=0x0000555555599410) const at thread:195:13
    frame #16: 0x00007ffff7e65cd4 libstdc++.so.6`execute_native_thread_routine at thread.cc:80:18
    frame #17: 0x00007ffff7f8857f libpthread.so.0`start_thread + 239
    frame #18: 0x00007ffff7b6ff13 libc.so.6`__GI___clone + 67
(lldb) p/x msg.msg_flags
(int) $8 = 0x00000020
</code></pre><p>So, In my case. I am in <code>1. Discard the excess bytes and return the MSG_TRUNC flag to the application.</code> scenario.</p>
<p>Too bad that boost asio library did not notice this kind of situation. or my bad :P</p>]]></content></item><item><title>PopupMenu example on Flutter</title><link>https://seungrye.github.io/posts/2019-06-07-popupmenu-eample-on-flutter/</link><pubDate>Fri, 07 Jun 2019 01:15:39 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-07-popupmenu-eample-on-flutter/</guid><description>&lt;p>Flutter 앱에서 깔끔한 &lt;a href="https://github.com/chinabrant/popup_menu">Popup Menu 라이브러리&lt;/a> 를 사용해서 팝업을 띄우는 예제를 작성해 본다.&lt;/p>
&lt;p>근데, 이미 Popup Menu 저장소에 샘플 코드가 포함되어 있음.. ㅎ;&lt;/p></description><content type="html"><![CDATA[<p>Flutter 앱에서 깔끔한 <a href="https://github.com/chinabrant/popup_menu">Popup Menu 라이브러리</a> 를 사용해서 팝업을 띄우는 예제를 작성해 본다.</p>
<p>근데, 이미 Popup Menu 저장소에 샘플 코드가 포함되어 있음.. ㅎ;</p>
<p>플러터 프로젝트 어떻게 만드는지 모르면, Flutter 는 <a href="https://flutter.dev/docs/get-started/test-drive#create-app">여기</a>를 참고해서 작성하자.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">popup_menu_prj$ tree
.
├── README.md
├── android
├── build
├── ios
├── lib
│   └── main.dart
├── pubspec.yaml
└── <span class="nb">test</span>
</code></pre></div><p>이 샘플에, 다음과 같은 팝업 메뉴를 띄우도록 할 거임.</p>
<!-- raw HTML omitted -->
<h3 id="add-dependency">Add Dependency</h3>
<p><code>pubspec.yaml</code> 파일에 <a href="https://pub.dev/packages/popup_menu#-installing-tab-">popup_menu 의존성 추가</a>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff">dependencies:
<span class="gi">+  popup_menu: ^1.0.1
</span></code></pre></div><h3 id="소스에-popup-menu-관련-코드-추가">소스에 Popup Menu 관련 코드 추가.</h3>
<p>샘플을 만들떄 diff 를 남겨둔게 없어서, 기억에 의존해서 적은것임.
따라서, 실제 diff 포멧과는 다름 :P</p>
<p>Note. 소스코드 라인이 너무 길어지는거 같아서&hellip; 불필요한 라인은 줄여서 적음.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff">import &#39;package:flutter/material.dart&#39;;
<span class="gi">+ import &#39;package:popup_menu/popup_menu.dart&#39;;
</span><span class="gi"></span>...

class _MyHomePageState extends State&lt;MyHomePage&gt; {
<span class="gi">+  GlobalKey btnKey2 = GlobalKey();
</span><span class="gi"></span>...

  Widget build(BuildContext context) {
<span class="gi">+    PopupMenu.context = context;
</span><span class="gi"></span>...

            mainAxisAlignment: MainAxisAlignment.center,
            children: &lt;Widget&gt;[
<span class="gi">+            Container(
</span><span class="gi">+              child: MaterialButton(
</span><span class="gi">+                  onPressed: customPopupMenu,
</span><span class="gi">+                  key: btnKey2,
</span><span class="gi">+                  height: 45.0,
</span><span class="gi">+                  child: Text(&#39;Show Menu&#39;)),
</span><span class="gi">+            ),
</span><span class="gi"></span>...

<span class="gi">+  void customPopupMenu() {
</span><span class="gi">+    var menu = PopupMenu(items: [
</span><span class="gi">+      MenuItem(title: &#39;Home&#39;, image: Icon(Icons.home, color: Colors.white,)),
</span><span class="gi">+      MenuItem(title: &#39;Setting&#39;,
</span><span class="gi">+            image: Icon(Icons.settings, color: Colors.white,)),
</span><span class="gi">+      MenuItem(title: &#39;PopupMenu&#39;,
</span><span class="gi">+            image: Icon(Icons.menu, color: Colors.white,)),
</span><span class="gi">+      MenuItem(title: &#39;Mail&#39;, image: Icon(Icons.mail, color: Colors.white,)),
</span><span class="gi">+      MenuItem(title: &#39;Power&#39;, image: Icon(Icons.power, color: Colors.white,)),
</span><span class="gi">+    ],
</span><span class="gi">+    onClickMenu: onClickMenu,
</span><span class="gi">+    onDismiss: onDismiss);
</span><span class="gi">+
</span><span class="gi">+    menu.show(widgetKey: btnKey2);
</span><span class="gi">+  }
</span><span class="gi">+
</span><span class="gi">+  void onDismiss() { print(&#39;Menu is closed&#39;); }
</span><span class="gi">+
</span><span class="gi">+  void onClickMenu(MenuItemProvider item) {
</span><span class="gi">+    print(&#39;Click menu -&gt; ${item.menuTitle}&#39;);
</span><span class="gi">+  }
</span></code></pre></div><p>여기서 뭐 설명할건 없지만, <code>_MyHomePageState::build()</code> 에서 &lsquo;Show Menu&rsquo; 텍스트가 적힌 <code>MaterialButton</code> 을 추가하고, 버튼이 눌렸을떄 <code>customPopupMenu</code> 가 호출되도록 처리함.</p>
<p><code>customPopupMenu</code> 에서는 팝업 메뉴에 추가될 메뉴 아이템을 만들고, 핸들러를 등록 (<code>onClickMenu:</code> , <code>onDismiss:</code>) 후 메뉴를 보여 (<code>.show</code>) 줍니다.</p>
<p>간단하죠?</p>]]></content></item><item><title>Git 의 원격 저장소의 브랜치 삭제하기</title><link>https://seungrye.github.io/posts/2019-06-02-git-remove-remote-branch/</link><pubDate>Sun, 02 Jun 2019 21:35:23 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-02-git-remove-remote-branch/</guid><description>&lt;p>git 의 원격 저장소에 있는 branch 를 삭제하는 방법을 알아 봅시다.&lt;/p></description><content type="html"><![CDATA[<p>git 의 원격 저장소에 있는 branch 를 삭제하는 방법을 알아 봅시다.</p>
<p>현재 remote 브랜치 목록을 확인해 봅시다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git branch -r
  origin/1-cmake
  origin/5-asio-read-std-vector-buffer-append
  origin/HEAD -&gt; origin/master</code></pre></div>
<hr>
<p>remote 브랜치를 삭제합니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git push origin --delete 5-asio-read-std-vector-buffer-append 
To www.enjian.ml:seungrye/teach-yourself-cpp.git
 - <span class="o">[</span>deleted<span class="o">]</span>         5-asio-read-std-vector-buffer-append</code></pre></div>
<hr>
<p>현재 remote 브랜치 목록을 확인해 봅시다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git branch -r
  origin/1-cmake
  origin/HEAD -&gt; origin/master</code></pre></div>]]></content></item><item><title>Git 의 원격 저장소 주소 변경하기</title><link>https://seungrye.github.io/posts/2019-06-02-git-change-remote-address/</link><pubDate>Sun, 02 Jun 2019 20:21:46 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-02-git-change-remote-address/</guid><description>&lt;p>git 의 원격 저장소 주소가 변경되었을때 대처 방법을 알아 봅시다.&lt;/p></description><content type="html"><![CDATA[<p>git 의 원격 저장소 주소가 변경되었을때 대처 방법을 알아 봅시다.</p>
<p>현재 <code>git-fetch</code> 했을때 발생하는 에러
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git fetch
fatal: repository <span class="s1">&#39;http://handmade.iptime.org/seungrye/teach-yourself-cpp.git/&#39;</span> not found</code></pre></div></p>
<hr>
<p>현재 repo 의 remote 주소
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git remote -v
origin	http://handmade.iptime.org/seungrye/teach-yourself-cpp.git <span class="o">(</span>fetch<span class="o">)</span>
origin	http://handmade.iptime.org/seungrye/teach-yourself-cpp.git <span class="o">(</span>push<span class="o">)</span></code></pre></div></p>
<hr>
<p>remote 변경
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git remote set-url origin git@www.enjian.ml:seungrye/teach-yourself-cpp.git </code></pre></div></p>
<hr>
<p>변경된 remote 확인
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git remote -v
origin	git@www.enjian.ml:seungrye/teach-yourself-cpp.git <span class="o">(</span>fetch<span class="o">)</span>
origin	git@www.enjian.ml:seungrye/teach-yourself-cpp.git <span class="o">(</span>push<span class="o">)</span></code></pre></div></p>
<hr>
<p>현재 <code>git-fetch</code> 했을때 결과
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash">$ git fetch
remote: Enumerating objects: 28, <span class="k">done</span>.
remote: Counting objects: 100% <span class="o">(</span>28/28<span class="o">)</span>, <span class="k">done</span>.
remote: Compressing objects: 100% <span class="o">(</span>17/17<span class="o">)</span>, <span class="k">done</span>.
remote: Total <span class="m">21</span> <span class="o">(</span>delta 12<span class="o">)</span>, reused <span class="m">2</span> <span class="o">(</span>delta 2<span class="o">)</span>
오브젝트 묶음 푸는 중: 100% <span class="o">(</span>21/21<span class="o">)</span>, 완료.
www.enjian.ml:seungrye/teach-yourself-cpp URL에서
 * <span class="o">[</span>새로운 브랜치<span class="o">]</span>   5-asio-read-std-vector-buffer-append -&gt; origin/5-asio-read-std-vector-buffer-append</code></pre></div></p>]]></content></item><item><title>Hello Rust</title><link>https://seungrye.github.io/posts/2019-06-02-hello-rust/</link><pubDate>Sun, 02 Jun 2019 12:37:17 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-02-hello-rust/</guid><description>&lt;p>rust lang를 통해 &amp;lsquo;Hello World&amp;rsquo; 출력하는 예제를 작성해 봅니다.&lt;/p>
&lt;p>인터넷에서 쉽게 찾을수 있는 내용이고, 이미 해봤던 내용이지만,
정리차원에서 작성합니다.&lt;/p></description><content type="html"><![CDATA[<p>rust lang를 통해 &lsquo;Hello World&rsquo; 출력하는 예제를 작성해 봅니다.</p>
<p>인터넷에서 쉽게 찾을수 있는 내용이고, 이미 해봤던 내용이지만,
정리차원에서 작성합니다.</p>
<h3 id="cargo-를-통해서-프로젝트-생성">Cargo 를 통해서 프로젝트 생성</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cargo new hello_rust
    Created binary <span class="o">(</span>application<span class="o">)</span> <span class="sb">`</span>hello_rust<span class="sb">`</span> package

$ ls
hello_rust/

$ tree hello_rust 
hello_rust
├── Cargo.toml
└── src
    └── main.rs

<span class="m">1</span> directory, <span class="m">2</span> files

$ cat hello_rust/Cargo.toml 
<span class="o">[</span>package<span class="o">]</span>
<span class="nv">name</span> <span class="o">=</span> <span class="s2">&#34;hello_rust&#34;</span>
<span class="nv">version</span> <span class="o">=</span> <span class="s2">&#34;0.1.0&#34;</span>
<span class="nv">authors</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&#34;Enji &lt;blah@blah.blah&gt;&#34;</span><span class="o">]</span>
<span class="nv">edition</span> <span class="o">=</span> <span class="s2">&#34;2018&#34;</span>

<span class="o">[</span>dependencies<span class="o">]</span>

$</code></pre></div>
<hr>
<h3 id="코드-수정">코드 수정</h3>
<p>변수에 문자열을 할당후, println! 을 통해서 포멧된 문자열을 출력하도록 처리.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-diff" data-lang="diff"> fn main() {
<span class="gd">-    println!(&#34;Hello, world!&#34;);
</span><span class="gd"></span><span class="gi">+    let hello = String::from(&#34;Hello, rust!&#34;);
</span><span class="gi">+    println!(&#34;{}&#34;, hello);
</span><span class="gi"></span> }
</code></pre></div>
<ul>
<li>ref : <a href="https://doc.rust-lang.org/std/string/struct.String.html">https://doc.rust-lang.org/std/string/struct.String.html</a></li>
</ul>
<hr>
<h3 id="빌드">빌드</h3>
<p>의존성 문제등을 확인하는 <code>cargo-check</code> 를 통해서 문제가 없는지 먼저 확인합니다.
이는 <code>cargo-build</code> 보다 훨씬 빠르게 명령이 완료되기 때문제 권장됩니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cargo check
    Checking hello_rust v0.1.0 <span class="o">(</span>/tmp/hello_rust<span class="o">)</span>
    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.16s

$ cargo build       
   Compiling hello_rust v0.1.0 <span class="o">(</span>/tmp/hello_rust<span class="o">)</span>
    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.46s</code></pre></div>
<hr>
<h3 id="실행">실행</h3>
<p><code>cargo-run</code> 을 통해서 빌드 및 실행해 볼수 있습니다.
혹은 빌드된 output 파일을 직접 실행해 볼수도 있습니다.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell">$ cargo run
    Finished dev <span class="o">[</span>unoptimized + debuginfo<span class="o">]</span> target<span class="o">(</span>s<span class="o">)</span> in 0.02s
     Running <span class="sb">`</span>target/debug/hello_rust<span class="sb">`</span>
Hello, rust!

$ ls 
Cargo.lock  Cargo.toml	src/  target/
$ ./target/debug/hello_rust 
Hello, rust!</code></pre></div>]]></content></item><item><title>시작</title><link>https://seungrye.github.io/posts/2019-06-01-hello/</link><pubDate>Sat, 01 Jun 2019 06:11:09 +0900</pubDate><guid>https://seungrye.github.io/posts/2019-06-01-hello/</guid><description>새로운 시작이네영&amp;hellip; 잘 해 봐야지여.</description><content type="html">&lt;p>새로운 시작이네영&amp;hellip;
잘 해 봐야지여.&lt;/p></content></item><item><title>Big Image Sample</title><link>https://seungrye.github.io/posts/2017-03-07-bigimg-sample/</link><pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2017-03-07-bigimg-sample/</guid><description>&lt;p>The image banners at the top of the page are refered to as &amp;ldquo;bigimg&amp;rdquo; in this theme. They are optional, and one more more can be specified. If more than one is specified, the images rotate every 10 seconds. In the front matter, bigimgs are specified using an array of hashes.&lt;/p></description><content type="html"><![CDATA[<p>The image banners at the top of the page are refered to as &ldquo;bigimg&rdquo; in this theme. They are optional, and one more more can be specified. If more than one is specified, the images rotate every 10 seconds. In the front matter, bigimgs are specified using an array of hashes.</p>
<p>A single bigimg can be specified in the front matter by the following YAML:</p>
<pre tabindex="0"><code>bigimg: [{src: &quot;/img/triangle.jpg&quot;, desc: &quot;Triangle&quot;}]
</code></pre><p>Multiple bigimgs can be specified in the front matter by the following YAML:</p>
<pre tabindex="0"><code>bigimg: [{src: &quot;/img/triangle.jpg&quot;, desc: &quot;Triangle&quot;}, 
         {src: &quot;/img/sphere.jpg&quot;, desc: &quot;Sphere&quot;}, 
         {src: &quot;/img/hexagon.jpg&quot;, desc: &quot;Hexagon&quot;}]
</code></pre><p>Also note that the description field is optional, and images could instead be specified by:</p>
<pre tabindex="0"><code>bigimg: [{src: &quot;/img/triangle.jpg&quot;}, 
         {src: &quot;/img/sphere.jpg&quot;}, 
         {src: &quot;/img/hexagon.jpg&quot;}]
</code></pre><p>The above YAML array of hashes were written in &ldquo;flow&rdquo; style. However when generating a new page or post with <code>hugo new post/mypost.md</code>, hugo may interpret the archetype for bigimg in the default YAML style. Defining multiple bigimg&rsquo;s complete with descriptions in this style would be specified by:</p>
<pre tabindex="0"><code>bigimg: 
- {src: &quot;/img/triangle.jpg&quot;, desc: &quot;Triangle&quot;}
- {src: &quot;/img/sphere.jpg&quot;, desc: &quot;Sphere&quot;}
- {src: &quot;/img/hexagon.jpg&quot;, desc: &quot;Hexagon&quot;}
</code></pre><p>Additional information can be found <a href="https://rhnh.net/2011/01/31/yaml-tutorial/">in this YAML tutorial</a>.</p>]]></content></item><item><title>Math Sample</title><link>https://seungrye.github.io/posts/2017-03-05-math-sample/</link><pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2017-03-05-math-sample/</guid><description>&lt;p>KaTeX can be used to generate complex math formulas server-side.&lt;/p>
&lt;p>$$
\phi = \frac{(1+\sqrt{5})}{2} = 1.6180339887\cdots
$$&lt;/p>
&lt;p>Additional details can be found on &lt;a href="https://github.com/Khan/KaTeX">GitHub&lt;/a> or on the &lt;a href="http://tiddlywiki.com/plugins/tiddlywiki/katex/">Wiki&lt;/a>.&lt;/p></description><content type="html"><![CDATA[<p>KaTeX can be used to generate complex math formulas server-side.</p>
<p>$$
\phi = \frac{(1+\sqrt{5})}{2} = 1.6180339887\cdots
$$</p>
<p>Additional details can be found on <a href="https://github.com/Khan/KaTeX">GitHub</a> or on the <a href="http://tiddlywiki.com/plugins/tiddlywiki/katex/">Wiki</a>.</p>
<h3 id="example-1">Example 1</h3>
<p>If the text between $$ contains newlines it will rendered in display mode:</p>
<pre tabindex="0"><code>$$
f(x) = \int_{-\infty}^\infty\hat f(\xi)\,e^{2 \pi i \xi x}\,d\xi
$$
</code></pre><p>$$
f(x) = \int_{-\infty}^\infty\hat f(\xi),e^{2 \pi i \xi x},d\xi
$$</p>
<h3 id="example-2">Example 2</h3>
<pre tabindex="0"><code>$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$
</code></pre><p>​​$$
\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} = 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }
$$
​​</p>
<h3 id="example-3">Example 3</h3>
<pre tabindex="0"><code>$$
1 +  \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \quad\quad \text{for }\lvert q\rvert&lt;1.
$$
</code></pre><p>$$
1 +  \frac{q^2}{(1-q)}+\frac{q^6}{(1-q)(1-q^2)}+\cdots = \prod_{j=0}^{\infty}\frac{1}{(1-q^{5j+2})(1-q^{5j+3})}, \quad\quad \text{for }\lvert q\rvert&lt;1.
$$</p>]]></content></item><item><title>Code Sample</title><link>https://seungrye.github.io/posts/2016-03-08-code-sample/</link><pubDate>Tue, 08 Mar 2016 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2016-03-08-code-sample/</guid><description>&lt;p>The following are two code samples using syntax highlighting.&lt;/p></description><content type="html"><![CDATA[<p>The following are two code samples using syntax highlighting.</p>
<p>The following is a code sample using triple backticks ( ``` ) code fencing provided in Hugo. This is client side highlighting and does not require any special installation.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="kd">var</span> <span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">,</span> <span class="nx">sum</span>
    <span class="nx">num1</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter first number&#34;</span><span class="p">)</span>
    <span class="nx">num2</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter second number&#34;</span><span class="p">)</span>
    <span class="nx">sum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num2</span><span class="p">)</span> <span class="c1">// &#34;+&#34; means &#34;add&#34;
</span><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Sum = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>  <span class="c1">// &#34;+&#34; means combine into a string
</span></code></pre></div><p>The following is a code sample using the &ldquo;highlight&rdquo; shortcode provided in Hugo. This is server side highlighting and requires Python and Pygments to be installed.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript">    <span class="kd">var</span> <span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">,</span> <span class="nx">sum</span>
    <span class="nx">num1</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter first number&#34;</span><span class="p">)</span>
    <span class="nx">num2</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter second number&#34;</span><span class="p">)</span>
    <span class="nx">sum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num2</span><span class="p">)</span> <span class="c1">// &#34;+&#34; means &#34;add&#34;
</span><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Sum = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>  <span class="c1">// &#34;+&#34; means combine into a string
</span></code></pre></div>
<p>And here is the same code with line numbers:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="ln">1</span>    <span class="kd">var</span> <span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">,</span> <span class="nx">sum</span>
<span class="ln">2</span>    <span class="nx">num1</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter first number&#34;</span><span class="p">)</span>
<span class="ln">3</span>    <span class="nx">num2</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s2">&#34;Enter second number&#34;</span><span class="p">)</span>
<span class="ln">4</span>    <span class="nx">sum</span> <span class="o">=</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num1</span><span class="p">)</span> <span class="o">+</span> <span class="nb">parseInt</span><span class="p">(</span><span class="nx">num2</span><span class="p">)</span> <span class="c1">// &#34;+&#34; means &#34;add&#34;
</span><span class="ln">5</span><span class="c1"></span>    <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;Sum = &#34;</span> <span class="o">+</span> <span class="nx">sum</span><span class="p">)</span>  <span class="c1">// &#34;+&#34; means combine into a string
</span></code></pre></div>]]></content></item><item><title>Flake it till you make it</title><link>https://seungrye.github.io/posts/2015-02-26-flake-it-till-you-make-it/</link><pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-02-26-flake-it-till-you-make-it/</guid><description>Under what circumstances should we step off a path? When is it essential that we finish what we start? If I bought a bag of peanuts and had an allergic reaction, no one would fault me if I threw it out. If I ended a relationship with a woman who hit me, no one would say that I had a commitment problem. But if I walk away from a seemingly secure route because my soul has other ideas, I am a flake?</description><content type="html"><![CDATA[<p>Under what circumstances should we step off a path? When is it essential that we finish what we start? If I bought a bag of peanuts and had an allergic reaction, no one would fault me if I threw it out. If I ended a relationship with a woman who hit me, no one would say that I had a commitment problem. But if I walk away from a seemingly secure route because my soul has other ideas, I am a flake?</p>
<p>The truth is that no one else can definitively know the path we are here to walk. It’s tempting to listen—many of us long for the omnipotent other—but unless they are genuine psychic intuitives, they can’t know. All others can know is their own truth, and if they’ve actually done the work to excavate it, they will have the good sense to know that they cannot genuinely know anyone else’s. Only soul knows the path it is here to walk. Since you are the only one living in your temple, only you can know its scriptures and interpretive structure.</p>
<p>At the heart of the struggle are two very different ideas of success—survival-driven and soul-driven. For survivalists, success is security, pragmatism, power over others. Success is the absence of material suffering, the nourishing of the soul be damned. It is an odd and ironic thing that most of the material power in our world often resides in the hands of younger souls. Still working in the egoic and material realms, they love the sensations of power and focus most of their energy on accumulation. Older souls tend not to be as materially driven. They have already played the worldly game in previous lives and they search for more subtle shades of meaning in this one—authentication rather than accumulation. They are often ignored by the culture at large, although they really are the truest warriors.</p>
<p>A soulful notion of success rests on the actualization of our innate image. Success is simply the completion of a soul step, however unsightly it may be. We have finished what we started when the lesson is learned. What a fear-based culture calls a wonderful opportunity may be fruitless and misguided for the soul. Staying in a passionless relationship may satisfy our need for comfort, but it may stifle the soul. Becoming a famous lawyer is only worthwhile if the soul demands it. It is an essential failure if you are called to be a monastic this time around. If you need to explore and abandon ten careers in order to stretch your soul toward its innate image, then so be it. Flake it till you make it.</p>
]]></content></item><item><title>Test markdown</title><link>https://seungrye.github.io/posts/2015-02-20-test-markdown/</link><pubDate>Fri, 20 Feb 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-02-20-test-markdown/</guid><description>You can write regular markdown here and Jekyll will automatically convert it to a nice webpage. I strongly encourage you to take 5 minutes to learn how to write in markdown - it&amp;rsquo;ll teach you how to transform regular text into bold/italics/headings/tables/etc.
Here is some bold text
Here is a secondary heading Here&amp;rsquo;s a useless table:
Number Next number Previous number Five Six Four Ten Eleven Nine Seven Eight Six Two Three One How about a yummy crepe?</description><content type="html"><![CDATA[<p>You can write regular <a href="http://markdowntutorial.com/">markdown</a> here and Jekyll will automatically convert it to a nice webpage.  I strongly encourage you to <a href="http://markdowntutorial.com/">take 5 minutes to learn how to write in markdown</a> - it&rsquo;ll teach you how to transform regular text into bold/italics/headings/tables/etc.</p>
<p><strong>Here is some bold text</strong></p>
<h2 id="here-is-a-secondary-heading">Here is a secondary heading</h2>
<p>Here&rsquo;s a useless table:</p>
<table>
<thead>
<tr>
<th style="text-align:left">Number</th>
<th style="text-align:left">Next number</th>
<th style="text-align:left">Previous number</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Five</td>
<td style="text-align:left">Six</td>
<td style="text-align:left">Four</td>
</tr>
<tr>
<td style="text-align:left">Ten</td>
<td style="text-align:left">Eleven</td>
<td style="text-align:left">Nine</td>
</tr>
<tr>
<td style="text-align:left">Seven</td>
<td style="text-align:left">Eight</td>
<td style="text-align:left">Six</td>
</tr>
<tr>
<td style="text-align:left">Two</td>
<td style="text-align:left">Three</td>
<td style="text-align:left">One</td>
</tr>
</tbody>
</table>
<p>How about a yummy crepe?</p>
<p><img src="http://s3-media3.fl.yelpcdn.com/bphoto/cQ1Yoa75m2yUFFbY2xwuqw/348s.jpg" alt="Crepe"></p>
<p>Here&rsquo;s a code chunk with syntax highlighting:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">foo</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">return</span><span class="p">(</span><span class="nx">x</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
<span class="p">}</span>
<span class="nx">foo</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div>]]></content></item><item><title>To be</title><link>https://seungrye.github.io/posts/2015-02-13-hamlet-monologue/</link><pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-02-13-hamlet-monologue/</guid><description>To be, or not to be&amp;ndash;that is the question: Whether &amp;lsquo;tis nobler in the mind to suffer The slings and arrows of outrageous fortune Or to take arms against a sea of troubles And by opposing end them. To die, to sleep&amp;ndash; No more&amp;ndash;and by a sleep to say we end The heartache, and the thousand natural shocks That flesh is heir to. &amp;lsquo;Tis a consummation Devoutly to be wished. To die, to sleep&amp;ndash; To sleep&amp;ndash;perchance to dream: ay, there&amp;rsquo;s the rub, For in that sleep of death what dreams may come When we have shuffled off this mortal coil, Must give us pause.</description><content type="html"><![CDATA[<p>To be, or not to be&ndash;that is the question:
Whether &lsquo;tis nobler in the mind to suffer
The slings and arrows of outrageous fortune
Or to take arms against a sea of troubles
And by opposing end them. To die, to sleep&ndash;
No more&ndash;and by a sleep to say we end
The heartache, and the thousand natural shocks
That flesh is heir to. &lsquo;Tis a consummation
Devoutly to be wished. To die, to sleep&ndash;
To sleep&ndash;perchance to dream: ay, there&rsquo;s the rub,
For in that sleep of death what dreams may come
When we have shuffled off this mortal coil,
Must give us pause. There&rsquo;s the respect
That makes calamity of so long life.
For who would bear the whips and scorns of time,
Th&rsquo; oppressor&rsquo;s wrong, the proud man&rsquo;s contumely
The pangs of despised love, the law&rsquo;s delay,
The insolence of office, and the spurns
That patient merit of th&rsquo; unworthy takes,
When he himself might his quietus make
With a bare bodkin? Who would fardels bear,
To grunt and sweat under a weary life,
But that the dread of something after death,
The undiscovered country, from whose bourn
No traveller returns, puzzles the will,
And makes us rather bear those ills we have
Than fly to others that we know not of?
Thus conscience does make cowards of us all,
And thus the native hue of resolution
Is sicklied o&rsquo;er with the pale cast of thought,
And enterprise of great pitch and moment
With this regard their currents turn awry
And lose the name of action. &ndash; Soft you now,
The fair Ophelia! &ndash; Nymph, in thy orisons
Be all my sins remembered.</p>
]]></content></item><item><title>Dear diary</title><link>https://seungrye.github.io/posts/2015-01-27-dear-diary/</link><pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-01-27-dear-diary/</guid><description>What is it with that Mary girl? Dragging me to school every day. As if I had a choice. What you don&amp;rsquo;t hear in those nursery rhymes is that she starves me if I don&amp;rsquo;t go to school with her; it&amp;rsquo;s the only way I can stay alive! I&amp;rsquo;m thinking about being adopted by Little Bo Peep, sure I may get lost, but anything is better than being with Mary and those little brats at school (shudder, shudder).</description><content type="html"><![CDATA[<p>What is it with that Mary girl?  Dragging me to school every day. As if I had a choice.  What you don&rsquo;t hear in those nursery rhymes is that she starves me if I don&rsquo;t go to school with her; it&rsquo;s the only way I can stay alive!  I&rsquo;m thinking about being adopted by Little Bo Peep, sure I may get lost, but anything is better than being with Mary and those little brats at school (shudder, shudder).</p>
]]></content></item><item><title>Soccer</title><link>https://seungrye.github.io/posts/2015-01-19-soccer/</link><pubDate>Mon, 19 Jan 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-01-19-soccer/</guid><description>From Wikipedia:
Association football, more commonly known as football or soccer,[2] is a sport played between two teams of eleven players with a spherical ball. It is played by 250 million players in over 200 countries, making it the world&amp;rsquo;s most popular sport.[3][4][5][6] The game is played on a rectangular field with a goal at each end. The object of the game is to score by getting the ball into the opposing goal.</description><content type="html"><![CDATA[<p>From Wikipedia:</p>
<p>Association football, more commonly known as football or soccer,[2] is a sport played between two teams of eleven players with a spherical ball. It is played by 250 million players in over 200 countries, making it the world&rsquo;s most popular sport.[3][4][5][6] The game is played on a rectangular field with a goal at each end. The object of the game is to score by getting the ball into the opposing goal.</p>
<p>The goalkeepers are the only players allowed to touch the ball with their hands or arms while it is in play and then only in their penalty area. Outfield players mostly use their feet to strike or pass the ball, but may use their head or torso to strike the ball instead. The team that scores the most goals by the end of the match wins. If the score is level at the end of the game, either a draw is declared or the game goes into extra time and/or a penalty shootout depending on the format of the competition. The Laws of the Game were originally codified in England by The Football Association in 1863. Association football is governed internationally by the International Federation of Association Football (FIFA; French: Fédération Internationale de Football Association) which organises a World Cup every four years.[7]</p>
]]></content></item><item><title>Pirates arrrr</title><link>https://seungrye.github.io/posts/2015-01-15-pirates/</link><pubDate>Thu, 15 Jan 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-01-15-pirates/</guid><description>Piracy is typically an act of robbery or criminal violence at sea. The term can include acts committed on land, in the air, or in other major bodies of water or on a shore. It does not normally include crimes committed against persons traveling on the same vessel as the perpetrator (e.g. one passenger stealing from others on the same vessel). The term has been used throughout history to refer to raids across land borders by non-state agents.</description><content type="html">&lt;p>Piracy is typically an act of robbery or criminal violence at sea. The term can include acts committed on land, in the air, or in other major bodies of water or on a shore. It does not normally include crimes committed against persons traveling on the same vessel as the perpetrator (e.g. one passenger stealing from others on the same vessel). The term has been used throughout history to refer to raids across land borders by non-state agents.&lt;/p></content></item><item><title>First post!</title><link>https://seungrye.github.io/posts/2015-01-04-first-post/</link><pubDate>Mon, 05 Jan 2015 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2015-01-04-first-post/</guid><description>This is my first post, how exciting!</description><content type="html">&lt;p>This is my first post, how exciting!&lt;/p></content></item></channel></rss>