<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>HANDMADE LOG</title><link>https://seungrye.github.io/</link><description>Recent content on HANDMADE LOG</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 30 Oct 2021 15:25:05 +0000</lastBuildDate><atom:link href="https://seungrye.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Font family not found issue on matplot</title><link>https://seungrye.github.io/posts/2021-10-30-matplot-fontfamily-not-found-issue/</link><pubDate>Sat, 30 Oct 2021 15:25:05 +0000</pubDate><guid>https://seungrye.github.io/posts/2021-10-30-matplot-fontfamily-not-found-issue/</guid><description>파이썬으로 matplot 를 사용할때, 한글 폰트가 다음과 유사한 에러로 정상 출력되지 않는 현상이 발생하는 경우가 있습니다. $ python3 ~/hello.py findfont: Font family [&amp;#39;NanumGothic&amp;#39;] not found. Falling back to DejaVu Sans. /home/seungrye/.local/lib/python3.9/site-packages/matplotlib/backends/backend_agg.py:240: RuntimeWarning: Glyph 49340 missing from current</description></item><item><title>Async, Await</title><link>https://seungrye.github.io/posts/seminar-async-await/</link><pubDate>Sun, 16 May 2021 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/seminar-async-await/</guid><description>.. contents:: Table of Contents ************************* concurrency / parallelism ************************* .. image:: ./resources/_gen/images/1_Q_UZeToStz8YY2oQGiUPqw.png :width: 640 :alt: concurrency vs parallelism * concurrency : 동시성 * parallelism : 병렬성 ****** syntax ****** asyncronous in JavaScript ========================= timeout ------- .. code-block:: html function async_fn(cb) { var finished = false; var url = 'https://i.imgur.com/82tHC9G.jpeg'; var request = new XMLHttpRequest(); var buffer; setTimeout(function repeat() { (finished)?cb(buffer):setTimeout(repeat, 0) }, 0); request.open('GET', url,</description></item><item><title>C++ 에서 Lambda 와 Functional feature</title><link>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</link><pubDate>Wed, 27 Jan 2021 00:00:00 +0000</pubDate><guid>https://seungrye.github.io/posts/2021-01-27-cpp-lambda-and-functional/</guid><description>목적 람다를 &amp;lsquo;어떻게&amp;rsquo; 쓰는지 에 대해 설명합니다. 람다가 &amp;lsquo;뭔지&amp;rsquo;, &amp;lsquo;어디에&amp;rsquo</description></item><item><title>Git 의 Tracking branch 변경하기</title><link>https://seungrye.github.io/posts/2021-01-16-git-%EC%9D%98-tracking-branch-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</link><pubDate>Sat, 16 Jan 2021 19:08:20 +0900</pubDate><guid>https://seungrye.github.io/posts/2021-01-16-git-%EC%9D%98-tracking-branch-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0/</guid><description>&lt;p>git 이 tracking 하는 branch 가 잘못되어 있을때, 수정하는 방법을 알아 봅시다.&lt;/p></description></item><item><title>C++ Error Handling Revisited - Raphael Meyer 보면서 정리</title><link>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</link><pubDate>Sat, 14 Nov 2020 00:00:00 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-11-14-c++-error-handling-revisited/</guid><description>&lt;p>C++ 에서 에러 처리를 어떻게 할수 있는지에 대해 알아보는 &lt;a href="https://youtu.be/Ybmomkc48wg">영상&lt;/a>을 보면서 정리(?) 한 내용입니다.&lt;/p>
&lt;p>영상에서는 haskell 예제를 보여주며 functional 컨셉을 설명하지만, (영어가 짧아 이해가 되지 않아) 단순히 변경되어가는 코드만 정리했습니다.
몇가지 코드(방법)이 더 있었는데 코드 자체가 이해가 안되서 정리하지 않았습니다.&lt;/p></description></item><item><title>Show code of exception occurred when call exec on python</title><link>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</link><pubDate>Tue, 04 Aug 2020 15:29:30 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-08-04-show_code_of_exception_occurred_when_call_exec_on_python/</guid><description>python 에서 exec 함수를 통해 임의의 코드를 수행시킬때, 예외가 발생했다면, 예외가 발생한 부분을 정확히 알고 싶을때 어떻게 할 수 있을까요@.@? 다음과 같이 traceback 을 서식화</description></item><item><title>홍길동전 서부극 Remake</title><link>https://seungrye.github.io/posts/2020-07-29-%ED%99%8D%EA%B8%B8%EB%8F%99%EC%A0%84-%EC%84%9C%EB%B6%80%EA%B7%B9-remake/</link><pubDate>Wed, 29 Jul 2020 18:56:38 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-29-%ED%99%8D%EA%B8%B8%EB%8F%99%EC%A0%84-%EC%84%9C%EB%B6%80%EA%B7%B9-remake/</guid><description>홍길동 이야기는 헐리우드 서부극으로 어레인지하면 꽤 재미있는 이야기가 나올거 같다. 독실한 기독교 신자이자 농장주인 아버지는 흑인 노예 사이에서 태어난 스튜어트</description></item><item><title>NestedDefaultOrderedDict on Python</title><link>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</link><pubDate>Tue, 28 Jul 2020 13:53:25 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-28-nesteddefaultordereddict-on-python/</guid><description>python 3.7 부터는 dict 의 order 가 보장되지만, 낮은 버전의 python 에서는 order 이 보장되지 않을 수 있습니다. (3.5 에서는 order 가 보장되지 않음. OrderedDict 를 사용해야 함.) 그리고, 다음과 같이 nested</description></item><item><title>Convert nested dict to ordered dict on Python</title><link>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</link><pubDate>Thu, 23 Jul 2020 16:56:10 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-23-convert-nested-dict-to-ordereddict-on-python/</guid><description>다음과 같이 충첩된 dict 가 있다고 할때, dict_ = { &amp;#39;a&amp;#39;: 1, &amp;#39;b&amp;#39;: [2, 3, 4], &amp;#39;c&amp;#39;: { &amp;#39;d&amp;#39;: 5 }, &amp;#39;d&amp;#39;: &amp;#39;6789&amp;#39; } ordered dict 로 변환하기 위해서는 다음과 같이 재귀 함수를 만들어서 변환할 수 있다. from collections import OrderedDict def</description></item><item><title>Initialize nested dict on Python</title><link>https://seungrye.github.io/posts/2020-07-21-initialize-nested-dict-on-python/</link><pubDate>Tue, 21 Jul 2020 10:37:57 +0900</pubDate><guid>https://seungrye.github.io/posts/2020-07-21-initialize-nested-dict-on-python/</guid><description>#!/usr/bin/perl my %dict_ = (); $dict-&amp;gt;{&amp;#39;hello&amp;#39;}-&amp;gt;{&amp;#39;world&amp;#39;} = &amp;#39;PERL&amp;#39;; print &amp;#34;dict_ : $dict \n&amp;#34;; print &amp;#34;hello : $dict-&amp;gt;{&amp;#39;hello&amp;#39;} \n&amp;#34;; print &amp;#34;world : $dict-&amp;gt;{&amp;#39;hello&amp;#39;}-&amp;gt;{&amp;#39;world&amp;#39;} \n&amp;#34;; 출력 결과는 다음과 같습니다. dict_ : HASH(0x5587f28af740) hello : HASH(0x5587f28c7530) world : PERL 파이썬에서 동일하게 코드를 구성하면 어떻게 동작할까영@</description></item></channel></rss>